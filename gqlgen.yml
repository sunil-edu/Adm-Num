# schema tells gqlgen where the GraphQL schema is located.
schema:
  - ./graphql/schema/*.gql


  # Where should the generated server code go?
exec:
  filename: ./graphql/generated/generated.go
  package: generated

  # Uncomment to enable federation
federation:
  filename: ./graphql/generated/federation.go
  package: generated

# Where should any generated models go?
model:
  filename: ./graphql/model/models_gen.go
  package: model

# custom directives which are not exposed during introspection. These directives are
# used for code generation only
directives:
  pulid:
    skip_runtime: true

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: ./graphql/resolver
  package: resolver
  filename_template: "{name}.resolvers.go"

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.

# autobind tells gqlgen to search for any type names in the GraphQL schema in the
# provided Go package. If they match it will use them, otherwise it will generate new ones.
autobind:
  - adm-num/ent  
  

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.Int

  Uint64:
    model:
      - github.com/99designs/gqlgen/graphql.Uint64


      