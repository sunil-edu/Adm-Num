// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/admnumber"
	"adm-num/ent/mststudent"
	"adm-num/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdmNumber  = "AdmNumber"
	TypeMstStudent = "MstStudent"
)

// AdmNumberMutation represents an operation that mutates the AdmNumber nodes in the graph.
type AdmNumberMutation struct {
	config
	op                Op
	typ               string
	id                *int
	adm_start_no      *string
	adm_current_no    *string
	is_prefixed       *bool
	prefix_str        *string
	suffix_str        *string
	separator         *string
	prefill_with_zero *bool
	prefill_width     *int
	addprefill_width  *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*AdmNumber, error)
	predicates        []predicate.AdmNumber
}

var _ ent.Mutation = (*AdmNumberMutation)(nil)

// admnumberOption allows management of the mutation configuration using functional options.
type admnumberOption func(*AdmNumberMutation)

// newAdmNumberMutation creates new mutation for the AdmNumber entity.
func newAdmNumberMutation(c config, op Op, opts ...admnumberOption) *AdmNumberMutation {
	m := &AdmNumberMutation{
		config:        c,
		op:            op,
		typ:           TypeAdmNumber,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdmNumberID sets the ID field of the mutation.
func withAdmNumberID(id int) admnumberOption {
	return func(m *AdmNumberMutation) {
		var (
			err   error
			once  sync.Once
			value *AdmNumber
		)
		m.oldValue = func(ctx context.Context) (*AdmNumber, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdmNumber.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdmNumber sets the old AdmNumber of the mutation.
func withAdmNumber(node *AdmNumber) admnumberOption {
	return func(m *AdmNumberMutation) {
		m.oldValue = func(context.Context) (*AdmNumber, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdmNumberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdmNumberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdmNumberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdmNumberMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdmNumber.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAdmStartNo sets the "adm_start_no" field.
func (m *AdmNumberMutation) SetAdmStartNo(s string) {
	m.adm_start_no = &s
}

// AdmStartNo returns the value of the "adm_start_no" field in the mutation.
func (m *AdmNumberMutation) AdmStartNo() (r string, exists bool) {
	v := m.adm_start_no
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmStartNo returns the old "adm_start_no" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldAdmStartNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmStartNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmStartNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmStartNo: %w", err)
	}
	return oldValue.AdmStartNo, nil
}

// ResetAdmStartNo resets all changes to the "adm_start_no" field.
func (m *AdmNumberMutation) ResetAdmStartNo() {
	m.adm_start_no = nil
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (m *AdmNumberMutation) SetAdmCurrentNo(s string) {
	m.adm_current_no = &s
}

// AdmCurrentNo returns the value of the "adm_current_no" field in the mutation.
func (m *AdmNumberMutation) AdmCurrentNo() (r string, exists bool) {
	v := m.adm_current_no
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmCurrentNo returns the old "adm_current_no" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldAdmCurrentNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmCurrentNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmCurrentNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmCurrentNo: %w", err)
	}
	return oldValue.AdmCurrentNo, nil
}

// ResetAdmCurrentNo resets all changes to the "adm_current_no" field.
func (m *AdmNumberMutation) ResetAdmCurrentNo() {
	m.adm_current_no = nil
}

// SetIsPrefixed sets the "is_prefixed" field.
func (m *AdmNumberMutation) SetIsPrefixed(b bool) {
	m.is_prefixed = &b
}

// IsPrefixed returns the value of the "is_prefixed" field in the mutation.
func (m *AdmNumberMutation) IsPrefixed() (r bool, exists bool) {
	v := m.is_prefixed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrefixed returns the old "is_prefixed" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldIsPrefixed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrefixed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrefixed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrefixed: %w", err)
	}
	return oldValue.IsPrefixed, nil
}

// ResetIsPrefixed resets all changes to the "is_prefixed" field.
func (m *AdmNumberMutation) ResetIsPrefixed() {
	m.is_prefixed = nil
}

// SetPrefixStr sets the "prefix_str" field.
func (m *AdmNumberMutation) SetPrefixStr(s string) {
	m.prefix_str = &s
}

// PrefixStr returns the value of the "prefix_str" field in the mutation.
func (m *AdmNumberMutation) PrefixStr() (r string, exists bool) {
	v := m.prefix_str
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefixStr returns the old "prefix_str" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldPrefixStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefixStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefixStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefixStr: %w", err)
	}
	return oldValue.PrefixStr, nil
}

// ResetPrefixStr resets all changes to the "prefix_str" field.
func (m *AdmNumberMutation) ResetPrefixStr() {
	m.prefix_str = nil
}

// SetSuffixStr sets the "suffix_str" field.
func (m *AdmNumberMutation) SetSuffixStr(s string) {
	m.suffix_str = &s
}

// SuffixStr returns the value of the "suffix_str" field in the mutation.
func (m *AdmNumberMutation) SuffixStr() (r string, exists bool) {
	v := m.suffix_str
	if v == nil {
		return
	}
	return *v, true
}

// OldSuffixStr returns the old "suffix_str" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldSuffixStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuffixStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuffixStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuffixStr: %w", err)
	}
	return oldValue.SuffixStr, nil
}

// ResetSuffixStr resets all changes to the "suffix_str" field.
func (m *AdmNumberMutation) ResetSuffixStr() {
	m.suffix_str = nil
}

// SetSeparator sets the "separator" field.
func (m *AdmNumberMutation) SetSeparator(s string) {
	m.separator = &s
}

// Separator returns the value of the "separator" field in the mutation.
func (m *AdmNumberMutation) Separator() (r string, exists bool) {
	v := m.separator
	if v == nil {
		return
	}
	return *v, true
}

// OldSeparator returns the old "separator" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldSeparator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeparator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeparator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeparator: %w", err)
	}
	return oldValue.Separator, nil
}

// ResetSeparator resets all changes to the "separator" field.
func (m *AdmNumberMutation) ResetSeparator() {
	m.separator = nil
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (m *AdmNumberMutation) SetPrefillWithZero(b bool) {
	m.prefill_with_zero = &b
}

// PrefillWithZero returns the value of the "prefill_with_zero" field in the mutation.
func (m *AdmNumberMutation) PrefillWithZero() (r bool, exists bool) {
	v := m.prefill_with_zero
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefillWithZero returns the old "prefill_with_zero" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldPrefillWithZero(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefillWithZero is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefillWithZero requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefillWithZero: %w", err)
	}
	return oldValue.PrefillWithZero, nil
}

// ResetPrefillWithZero resets all changes to the "prefill_with_zero" field.
func (m *AdmNumberMutation) ResetPrefillWithZero() {
	m.prefill_with_zero = nil
}

// SetPrefillWidth sets the "prefill_width" field.
func (m *AdmNumberMutation) SetPrefillWidth(i int) {
	m.prefill_width = &i
	m.addprefill_width = nil
}

// PrefillWidth returns the value of the "prefill_width" field in the mutation.
func (m *AdmNumberMutation) PrefillWidth() (r int, exists bool) {
	v := m.prefill_width
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefillWidth returns the old "prefill_width" field's value of the AdmNumber entity.
// If the AdmNumber object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdmNumberMutation) OldPrefillWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefillWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefillWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefillWidth: %w", err)
	}
	return oldValue.PrefillWidth, nil
}

// AddPrefillWidth adds i to the "prefill_width" field.
func (m *AdmNumberMutation) AddPrefillWidth(i int) {
	if m.addprefill_width != nil {
		*m.addprefill_width += i
	} else {
		m.addprefill_width = &i
	}
}

// AddedPrefillWidth returns the value that was added to the "prefill_width" field in this mutation.
func (m *AdmNumberMutation) AddedPrefillWidth() (r int, exists bool) {
	v := m.addprefill_width
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrefillWidth resets all changes to the "prefill_width" field.
func (m *AdmNumberMutation) ResetPrefillWidth() {
	m.prefill_width = nil
	m.addprefill_width = nil
}

// Where appends a list predicates to the AdmNumberMutation builder.
func (m *AdmNumberMutation) Where(ps ...predicate.AdmNumber) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AdmNumberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AdmNumber).
func (m *AdmNumberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdmNumberMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.adm_start_no != nil {
		fields = append(fields, admnumber.FieldAdmStartNo)
	}
	if m.adm_current_no != nil {
		fields = append(fields, admnumber.FieldAdmCurrentNo)
	}
	if m.is_prefixed != nil {
		fields = append(fields, admnumber.FieldIsPrefixed)
	}
	if m.prefix_str != nil {
		fields = append(fields, admnumber.FieldPrefixStr)
	}
	if m.suffix_str != nil {
		fields = append(fields, admnumber.FieldSuffixStr)
	}
	if m.separator != nil {
		fields = append(fields, admnumber.FieldSeparator)
	}
	if m.prefill_with_zero != nil {
		fields = append(fields, admnumber.FieldPrefillWithZero)
	}
	if m.prefill_width != nil {
		fields = append(fields, admnumber.FieldPrefillWidth)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdmNumberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admnumber.FieldAdmStartNo:
		return m.AdmStartNo()
	case admnumber.FieldAdmCurrentNo:
		return m.AdmCurrentNo()
	case admnumber.FieldIsPrefixed:
		return m.IsPrefixed()
	case admnumber.FieldPrefixStr:
		return m.PrefixStr()
	case admnumber.FieldSuffixStr:
		return m.SuffixStr()
	case admnumber.FieldSeparator:
		return m.Separator()
	case admnumber.FieldPrefillWithZero:
		return m.PrefillWithZero()
	case admnumber.FieldPrefillWidth:
		return m.PrefillWidth()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdmNumberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admnumber.FieldAdmStartNo:
		return m.OldAdmStartNo(ctx)
	case admnumber.FieldAdmCurrentNo:
		return m.OldAdmCurrentNo(ctx)
	case admnumber.FieldIsPrefixed:
		return m.OldIsPrefixed(ctx)
	case admnumber.FieldPrefixStr:
		return m.OldPrefixStr(ctx)
	case admnumber.FieldSuffixStr:
		return m.OldSuffixStr(ctx)
	case admnumber.FieldSeparator:
		return m.OldSeparator(ctx)
	case admnumber.FieldPrefillWithZero:
		return m.OldPrefillWithZero(ctx)
	case admnumber.FieldPrefillWidth:
		return m.OldPrefillWidth(ctx)
	}
	return nil, fmt.Errorf("unknown AdmNumber field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdmNumberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admnumber.FieldAdmStartNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmStartNo(v)
		return nil
	case admnumber.FieldAdmCurrentNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmCurrentNo(v)
		return nil
	case admnumber.FieldIsPrefixed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrefixed(v)
		return nil
	case admnumber.FieldPrefixStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefixStr(v)
		return nil
	case admnumber.FieldSuffixStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuffixStr(v)
		return nil
	case admnumber.FieldSeparator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeparator(v)
		return nil
	case admnumber.FieldPrefillWithZero:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefillWithZero(v)
		return nil
	case admnumber.FieldPrefillWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefillWidth(v)
		return nil
	}
	return fmt.Errorf("unknown AdmNumber field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdmNumberMutation) AddedFields() []string {
	var fields []string
	if m.addprefill_width != nil {
		fields = append(fields, admnumber.FieldPrefillWidth)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdmNumberMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case admnumber.FieldPrefillWidth:
		return m.AddedPrefillWidth()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdmNumberMutation) AddField(name string, value ent.Value) error {
	switch name {
	case admnumber.FieldPrefillWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrefillWidth(v)
		return nil
	}
	return fmt.Errorf("unknown AdmNumber numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdmNumberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdmNumberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdmNumberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdmNumber nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdmNumberMutation) ResetField(name string) error {
	switch name {
	case admnumber.FieldAdmStartNo:
		m.ResetAdmStartNo()
		return nil
	case admnumber.FieldAdmCurrentNo:
		m.ResetAdmCurrentNo()
		return nil
	case admnumber.FieldIsPrefixed:
		m.ResetIsPrefixed()
		return nil
	case admnumber.FieldPrefixStr:
		m.ResetPrefixStr()
		return nil
	case admnumber.FieldSuffixStr:
		m.ResetSuffixStr()
		return nil
	case admnumber.FieldSeparator:
		m.ResetSeparator()
		return nil
	case admnumber.FieldPrefillWithZero:
		m.ResetPrefillWithZero()
		return nil
	case admnumber.FieldPrefillWidth:
		m.ResetPrefillWidth()
		return nil
	}
	return fmt.Errorf("unknown AdmNumber field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdmNumberMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdmNumberMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdmNumberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdmNumberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdmNumberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdmNumberMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdmNumberMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdmNumber unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdmNumberMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdmNumber edge %s", name)
}

// MstStudentMutation represents an operation that mutates the MstStudent nodes in the graph.
type MstStudentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	first_name      *string
	middle_name     *string
	last_name       *string
	std_studying    *bool
	std_status      *string
	std_sex         *string
	std_reg_no      *string
	std_adm_no      *string
	std_doa         *time.Time
	std_fresher     *bool
	std_dob         *time.Time
	std_email       *string
	std_mobile      *string
	std_father_name *string
	std_mother_name *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*MstStudent, error)
	predicates      []predicate.MstStudent
}

var _ ent.Mutation = (*MstStudentMutation)(nil)

// mststudentOption allows management of the mutation configuration using functional options.
type mststudentOption func(*MstStudentMutation)

// newMstStudentMutation creates new mutation for the MstStudent entity.
func newMstStudentMutation(c config, op Op, opts ...mststudentOption) *MstStudentMutation {
	m := &MstStudentMutation{
		config:        c,
		op:            op,
		typ:           TypeMstStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMstStudentID sets the ID field of the mutation.
func withMstStudentID(id int) mststudentOption {
	return func(m *MstStudentMutation) {
		var (
			err   error
			once  sync.Once
			value *MstStudent
		)
		m.oldValue = func(ctx context.Context) (*MstStudent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MstStudent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMstStudent sets the old MstStudent of the mutation.
func withMstStudent(node *MstStudent) mststudentOption {
	return func(m *MstStudentMutation) {
		m.oldValue = func(context.Context) (*MstStudent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MstStudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MstStudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MstStudentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MstStudentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MstStudent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *MstStudentMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *MstStudentMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *MstStudentMutation) ResetFirstName() {
	m.first_name = nil
}

// SetMiddleName sets the "middle_name" field.
func (m *MstStudentMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *MstStudentMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *MstStudentMutation) ResetMiddleName() {
	m.middle_name = nil
}

// SetLastName sets the "last_name" field.
func (m *MstStudentMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *MstStudentMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *MstStudentMutation) ResetLastName() {
	m.last_name = nil
}

// SetStdStudying sets the "std_studying" field.
func (m *MstStudentMutation) SetStdStudying(b bool) {
	m.std_studying = &b
}

// StdStudying returns the value of the "std_studying" field in the mutation.
func (m *MstStudentMutation) StdStudying() (r bool, exists bool) {
	v := m.std_studying
	if v == nil {
		return
	}
	return *v, true
}

// OldStdStudying returns the old "std_studying" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdStudying(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdStudying is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdStudying requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdStudying: %w", err)
	}
	return oldValue.StdStudying, nil
}

// ResetStdStudying resets all changes to the "std_studying" field.
func (m *MstStudentMutation) ResetStdStudying() {
	m.std_studying = nil
}

// SetStdStatus sets the "std_status" field.
func (m *MstStudentMutation) SetStdStatus(s string) {
	m.std_status = &s
}

// StdStatus returns the value of the "std_status" field in the mutation.
func (m *MstStudentMutation) StdStatus() (r string, exists bool) {
	v := m.std_status
	if v == nil {
		return
	}
	return *v, true
}

// OldStdStatus returns the old "std_status" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdStatus: %w", err)
	}
	return oldValue.StdStatus, nil
}

// ResetStdStatus resets all changes to the "std_status" field.
func (m *MstStudentMutation) ResetStdStatus() {
	m.std_status = nil
}

// SetStdSex sets the "std_sex" field.
func (m *MstStudentMutation) SetStdSex(s string) {
	m.std_sex = &s
}

// StdSex returns the value of the "std_sex" field in the mutation.
func (m *MstStudentMutation) StdSex() (r string, exists bool) {
	v := m.std_sex
	if v == nil {
		return
	}
	return *v, true
}

// OldStdSex returns the old "std_sex" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdSex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdSex: %w", err)
	}
	return oldValue.StdSex, nil
}

// ResetStdSex resets all changes to the "std_sex" field.
func (m *MstStudentMutation) ResetStdSex() {
	m.std_sex = nil
}

// SetStdRegNo sets the "std_reg_no" field.
func (m *MstStudentMutation) SetStdRegNo(s string) {
	m.std_reg_no = &s
}

// StdRegNo returns the value of the "std_reg_no" field in the mutation.
func (m *MstStudentMutation) StdRegNo() (r string, exists bool) {
	v := m.std_reg_no
	if v == nil {
		return
	}
	return *v, true
}

// OldStdRegNo returns the old "std_reg_no" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdRegNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdRegNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdRegNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdRegNo: %w", err)
	}
	return oldValue.StdRegNo, nil
}

// ResetStdRegNo resets all changes to the "std_reg_no" field.
func (m *MstStudentMutation) ResetStdRegNo() {
	m.std_reg_no = nil
}

// SetStdAdmNo sets the "std_adm_no" field.
func (m *MstStudentMutation) SetStdAdmNo(s string) {
	m.std_adm_no = &s
}

// StdAdmNo returns the value of the "std_adm_no" field in the mutation.
func (m *MstStudentMutation) StdAdmNo() (r string, exists bool) {
	v := m.std_adm_no
	if v == nil {
		return
	}
	return *v, true
}

// OldStdAdmNo returns the old "std_adm_no" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdAdmNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdAdmNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdAdmNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdAdmNo: %w", err)
	}
	return oldValue.StdAdmNo, nil
}

// ResetStdAdmNo resets all changes to the "std_adm_no" field.
func (m *MstStudentMutation) ResetStdAdmNo() {
	m.std_adm_no = nil
}

// SetStdDoa sets the "std_doa" field.
func (m *MstStudentMutation) SetStdDoa(t time.Time) {
	m.std_doa = &t
}

// StdDoa returns the value of the "std_doa" field in the mutation.
func (m *MstStudentMutation) StdDoa() (r time.Time, exists bool) {
	v := m.std_doa
	if v == nil {
		return
	}
	return *v, true
}

// OldStdDoa returns the old "std_doa" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdDoa(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdDoa is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdDoa requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdDoa: %w", err)
	}
	return oldValue.StdDoa, nil
}

// ClearStdDoa clears the value of the "std_doa" field.
func (m *MstStudentMutation) ClearStdDoa() {
	m.std_doa = nil
	m.clearedFields[mststudent.FieldStdDoa] = struct{}{}
}

// StdDoaCleared returns if the "std_doa" field was cleared in this mutation.
func (m *MstStudentMutation) StdDoaCleared() bool {
	_, ok := m.clearedFields[mststudent.FieldStdDoa]
	return ok
}

// ResetStdDoa resets all changes to the "std_doa" field.
func (m *MstStudentMutation) ResetStdDoa() {
	m.std_doa = nil
	delete(m.clearedFields, mststudent.FieldStdDoa)
}

// SetStdFresher sets the "std_fresher" field.
func (m *MstStudentMutation) SetStdFresher(b bool) {
	m.std_fresher = &b
}

// StdFresher returns the value of the "std_fresher" field in the mutation.
func (m *MstStudentMutation) StdFresher() (r bool, exists bool) {
	v := m.std_fresher
	if v == nil {
		return
	}
	return *v, true
}

// OldStdFresher returns the old "std_fresher" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdFresher(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdFresher is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdFresher requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdFresher: %w", err)
	}
	return oldValue.StdFresher, nil
}

// ResetStdFresher resets all changes to the "std_fresher" field.
func (m *MstStudentMutation) ResetStdFresher() {
	m.std_fresher = nil
}

// SetStdDob sets the "std_dob" field.
func (m *MstStudentMutation) SetStdDob(t time.Time) {
	m.std_dob = &t
}

// StdDob returns the value of the "std_dob" field in the mutation.
func (m *MstStudentMutation) StdDob() (r time.Time, exists bool) {
	v := m.std_dob
	if v == nil {
		return
	}
	return *v, true
}

// OldStdDob returns the old "std_dob" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdDob(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdDob is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdDob requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdDob: %w", err)
	}
	return oldValue.StdDob, nil
}

// ClearStdDob clears the value of the "std_dob" field.
func (m *MstStudentMutation) ClearStdDob() {
	m.std_dob = nil
	m.clearedFields[mststudent.FieldStdDob] = struct{}{}
}

// StdDobCleared returns if the "std_dob" field was cleared in this mutation.
func (m *MstStudentMutation) StdDobCleared() bool {
	_, ok := m.clearedFields[mststudent.FieldStdDob]
	return ok
}

// ResetStdDob resets all changes to the "std_dob" field.
func (m *MstStudentMutation) ResetStdDob() {
	m.std_dob = nil
	delete(m.clearedFields, mststudent.FieldStdDob)
}

// SetStdEmail sets the "std_email" field.
func (m *MstStudentMutation) SetStdEmail(s string) {
	m.std_email = &s
}

// StdEmail returns the value of the "std_email" field in the mutation.
func (m *MstStudentMutation) StdEmail() (r string, exists bool) {
	v := m.std_email
	if v == nil {
		return
	}
	return *v, true
}

// OldStdEmail returns the old "std_email" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdEmail: %w", err)
	}
	return oldValue.StdEmail, nil
}

// ResetStdEmail resets all changes to the "std_email" field.
func (m *MstStudentMutation) ResetStdEmail() {
	m.std_email = nil
}

// SetStdMobile sets the "std_mobile" field.
func (m *MstStudentMutation) SetStdMobile(s string) {
	m.std_mobile = &s
}

// StdMobile returns the value of the "std_mobile" field in the mutation.
func (m *MstStudentMutation) StdMobile() (r string, exists bool) {
	v := m.std_mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldStdMobile returns the old "std_mobile" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdMobile: %w", err)
	}
	return oldValue.StdMobile, nil
}

// ResetStdMobile resets all changes to the "std_mobile" field.
func (m *MstStudentMutation) ResetStdMobile() {
	m.std_mobile = nil
}

// SetStdFatherName sets the "std_father_name" field.
func (m *MstStudentMutation) SetStdFatherName(s string) {
	m.std_father_name = &s
}

// StdFatherName returns the value of the "std_father_name" field in the mutation.
func (m *MstStudentMutation) StdFatherName() (r string, exists bool) {
	v := m.std_father_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStdFatherName returns the old "std_father_name" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdFatherName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdFatherName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdFatherName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdFatherName: %w", err)
	}
	return oldValue.StdFatherName, nil
}

// ResetStdFatherName resets all changes to the "std_father_name" field.
func (m *MstStudentMutation) ResetStdFatherName() {
	m.std_father_name = nil
}

// SetStdMotherName sets the "std_mother_name" field.
func (m *MstStudentMutation) SetStdMotherName(s string) {
	m.std_mother_name = &s
}

// StdMotherName returns the value of the "std_mother_name" field in the mutation.
func (m *MstStudentMutation) StdMotherName() (r string, exists bool) {
	v := m.std_mother_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStdMotherName returns the old "std_mother_name" field's value of the MstStudent entity.
// If the MstStudent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MstStudentMutation) OldStdMotherName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStdMotherName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStdMotherName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStdMotherName: %w", err)
	}
	return oldValue.StdMotherName, nil
}

// ResetStdMotherName resets all changes to the "std_mother_name" field.
func (m *MstStudentMutation) ResetStdMotherName() {
	m.std_mother_name = nil
}

// Where appends a list predicates to the MstStudentMutation builder.
func (m *MstStudentMutation) Where(ps ...predicate.MstStudent) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MstStudentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MstStudent).
func (m *MstStudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MstStudentMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.first_name != nil {
		fields = append(fields, mststudent.FieldFirstName)
	}
	if m.middle_name != nil {
		fields = append(fields, mststudent.FieldMiddleName)
	}
	if m.last_name != nil {
		fields = append(fields, mststudent.FieldLastName)
	}
	if m.std_studying != nil {
		fields = append(fields, mststudent.FieldStdStudying)
	}
	if m.std_status != nil {
		fields = append(fields, mststudent.FieldStdStatus)
	}
	if m.std_sex != nil {
		fields = append(fields, mststudent.FieldStdSex)
	}
	if m.std_reg_no != nil {
		fields = append(fields, mststudent.FieldStdRegNo)
	}
	if m.std_adm_no != nil {
		fields = append(fields, mststudent.FieldStdAdmNo)
	}
	if m.std_doa != nil {
		fields = append(fields, mststudent.FieldStdDoa)
	}
	if m.std_fresher != nil {
		fields = append(fields, mststudent.FieldStdFresher)
	}
	if m.std_dob != nil {
		fields = append(fields, mststudent.FieldStdDob)
	}
	if m.std_email != nil {
		fields = append(fields, mststudent.FieldStdEmail)
	}
	if m.std_mobile != nil {
		fields = append(fields, mststudent.FieldStdMobile)
	}
	if m.std_father_name != nil {
		fields = append(fields, mststudent.FieldStdFatherName)
	}
	if m.std_mother_name != nil {
		fields = append(fields, mststudent.FieldStdMotherName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MstStudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mststudent.FieldFirstName:
		return m.FirstName()
	case mststudent.FieldMiddleName:
		return m.MiddleName()
	case mststudent.FieldLastName:
		return m.LastName()
	case mststudent.FieldStdStudying:
		return m.StdStudying()
	case mststudent.FieldStdStatus:
		return m.StdStatus()
	case mststudent.FieldStdSex:
		return m.StdSex()
	case mststudent.FieldStdRegNo:
		return m.StdRegNo()
	case mststudent.FieldStdAdmNo:
		return m.StdAdmNo()
	case mststudent.FieldStdDoa:
		return m.StdDoa()
	case mststudent.FieldStdFresher:
		return m.StdFresher()
	case mststudent.FieldStdDob:
		return m.StdDob()
	case mststudent.FieldStdEmail:
		return m.StdEmail()
	case mststudent.FieldStdMobile:
		return m.StdMobile()
	case mststudent.FieldStdFatherName:
		return m.StdFatherName()
	case mststudent.FieldStdMotherName:
		return m.StdMotherName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MstStudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mststudent.FieldFirstName:
		return m.OldFirstName(ctx)
	case mststudent.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case mststudent.FieldLastName:
		return m.OldLastName(ctx)
	case mststudent.FieldStdStudying:
		return m.OldStdStudying(ctx)
	case mststudent.FieldStdStatus:
		return m.OldStdStatus(ctx)
	case mststudent.FieldStdSex:
		return m.OldStdSex(ctx)
	case mststudent.FieldStdRegNo:
		return m.OldStdRegNo(ctx)
	case mststudent.FieldStdAdmNo:
		return m.OldStdAdmNo(ctx)
	case mststudent.FieldStdDoa:
		return m.OldStdDoa(ctx)
	case mststudent.FieldStdFresher:
		return m.OldStdFresher(ctx)
	case mststudent.FieldStdDob:
		return m.OldStdDob(ctx)
	case mststudent.FieldStdEmail:
		return m.OldStdEmail(ctx)
	case mststudent.FieldStdMobile:
		return m.OldStdMobile(ctx)
	case mststudent.FieldStdFatherName:
		return m.OldStdFatherName(ctx)
	case mststudent.FieldStdMotherName:
		return m.OldStdMotherName(ctx)
	}
	return nil, fmt.Errorf("unknown MstStudent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstStudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mststudent.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case mststudent.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case mststudent.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case mststudent.FieldStdStudying:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdStudying(v)
		return nil
	case mststudent.FieldStdStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdStatus(v)
		return nil
	case mststudent.FieldStdSex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdSex(v)
		return nil
	case mststudent.FieldStdRegNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdRegNo(v)
		return nil
	case mststudent.FieldStdAdmNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdAdmNo(v)
		return nil
	case mststudent.FieldStdDoa:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdDoa(v)
		return nil
	case mststudent.FieldStdFresher:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdFresher(v)
		return nil
	case mststudent.FieldStdDob:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdDob(v)
		return nil
	case mststudent.FieldStdEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdEmail(v)
		return nil
	case mststudent.FieldStdMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdMobile(v)
		return nil
	case mststudent.FieldStdFatherName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdFatherName(v)
		return nil
	case mststudent.FieldStdMotherName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStdMotherName(v)
		return nil
	}
	return fmt.Errorf("unknown MstStudent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MstStudentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MstStudentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MstStudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MstStudent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MstStudentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mststudent.FieldStdDoa) {
		fields = append(fields, mststudent.FieldStdDoa)
	}
	if m.FieldCleared(mststudent.FieldStdDob) {
		fields = append(fields, mststudent.FieldStdDob)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MstStudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MstStudentMutation) ClearField(name string) error {
	switch name {
	case mststudent.FieldStdDoa:
		m.ClearStdDoa()
		return nil
	case mststudent.FieldStdDob:
		m.ClearStdDob()
		return nil
	}
	return fmt.Errorf("unknown MstStudent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MstStudentMutation) ResetField(name string) error {
	switch name {
	case mststudent.FieldFirstName:
		m.ResetFirstName()
		return nil
	case mststudent.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case mststudent.FieldLastName:
		m.ResetLastName()
		return nil
	case mststudent.FieldStdStudying:
		m.ResetStdStudying()
		return nil
	case mststudent.FieldStdStatus:
		m.ResetStdStatus()
		return nil
	case mststudent.FieldStdSex:
		m.ResetStdSex()
		return nil
	case mststudent.FieldStdRegNo:
		m.ResetStdRegNo()
		return nil
	case mststudent.FieldStdAdmNo:
		m.ResetStdAdmNo()
		return nil
	case mststudent.FieldStdDoa:
		m.ResetStdDoa()
		return nil
	case mststudent.FieldStdFresher:
		m.ResetStdFresher()
		return nil
	case mststudent.FieldStdDob:
		m.ResetStdDob()
		return nil
	case mststudent.FieldStdEmail:
		m.ResetStdEmail()
		return nil
	case mststudent.FieldStdMobile:
		m.ResetStdMobile()
		return nil
	case mststudent.FieldStdFatherName:
		m.ResetStdFatherName()
		return nil
	case mststudent.FieldStdMotherName:
		m.ResetStdMotherName()
		return nil
	}
	return fmt.Errorf("unknown MstStudent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MstStudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MstStudentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MstStudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MstStudentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MstStudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MstStudentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MstStudentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MstStudent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MstStudentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MstStudent edge %s", name)
}
