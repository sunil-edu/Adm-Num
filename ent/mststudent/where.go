// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package mststudent

import (
	"adm-num/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// StdStudying applies equality check predicate on the "std_studying" field. It's identical to StdStudyingEQ.
func StdStudying(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdStudying), v))
	})
}

// StdStatus applies equality check predicate on the "std_status" field. It's identical to StdStatusEQ.
func StdStatus(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdStatus), v))
	})
}

// StdSex applies equality check predicate on the "std_sex" field. It's identical to StdSexEQ.
func StdSex(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdSex), v))
	})
}

// StdRegNo applies equality check predicate on the "std_reg_no" field. It's identical to StdRegNoEQ.
func StdRegNo(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdRegNo), v))
	})
}

// StdAdmNo applies equality check predicate on the "std_adm_no" field. It's identical to StdAdmNoEQ.
func StdAdmNo(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdAdmNo), v))
	})
}

// StdDoa applies equality check predicate on the "std_doa" field. It's identical to StdDoaEQ.
func StdDoa(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdDoa), v))
	})
}

// StdFresher applies equality check predicate on the "std_fresher" field. It's identical to StdFresherEQ.
func StdFresher(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFresher), v))
	})
}

// StdDob applies equality check predicate on the "std_dob" field. It's identical to StdDobEQ.
func StdDob(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdDob), v))
	})
}

// StdEmail applies equality check predicate on the "std_email" field. It's identical to StdEmailEQ.
func StdEmail(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdEmail), v))
	})
}

// StdMobile applies equality check predicate on the "std_mobile" field. It's identical to StdMobileEQ.
func StdMobile(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMobile), v))
	})
}

// StdFatherName applies equality check predicate on the "std_father_name" field. It's identical to StdFatherNameEQ.
func StdFatherName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFatherName), v))
	})
}

// StdMotherName applies equality check predicate on the "std_mother_name" field. It's identical to StdMotherNameEQ.
func StdMotherName(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMotherName), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMiddleName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// StdStudyingEQ applies the EQ predicate on the "std_studying" field.
func StdStudyingEQ(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdStudying), v))
	})
}

// StdStudyingNEQ applies the NEQ predicate on the "std_studying" field.
func StdStudyingNEQ(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdStudying), v))
	})
}

// StdStatusEQ applies the EQ predicate on the "std_status" field.
func StdStatusEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdStatus), v))
	})
}

// StdStatusNEQ applies the NEQ predicate on the "std_status" field.
func StdStatusNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdStatus), v))
	})
}

// StdStatusIn applies the In predicate on the "std_status" field.
func StdStatusIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdStatus), v...))
	})
}

// StdStatusNotIn applies the NotIn predicate on the "std_status" field.
func StdStatusNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdStatus), v...))
	})
}

// StdStatusGT applies the GT predicate on the "std_status" field.
func StdStatusGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdStatus), v))
	})
}

// StdStatusGTE applies the GTE predicate on the "std_status" field.
func StdStatusGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdStatus), v))
	})
}

// StdStatusLT applies the LT predicate on the "std_status" field.
func StdStatusLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdStatus), v))
	})
}

// StdStatusLTE applies the LTE predicate on the "std_status" field.
func StdStatusLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdStatus), v))
	})
}

// StdStatusContains applies the Contains predicate on the "std_status" field.
func StdStatusContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdStatus), v))
	})
}

// StdStatusHasPrefix applies the HasPrefix predicate on the "std_status" field.
func StdStatusHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdStatus), v))
	})
}

// StdStatusHasSuffix applies the HasSuffix predicate on the "std_status" field.
func StdStatusHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdStatus), v))
	})
}

// StdStatusEqualFold applies the EqualFold predicate on the "std_status" field.
func StdStatusEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdStatus), v))
	})
}

// StdStatusContainsFold applies the ContainsFold predicate on the "std_status" field.
func StdStatusContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdStatus), v))
	})
}

// StdSexEQ applies the EQ predicate on the "std_sex" field.
func StdSexEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdSex), v))
	})
}

// StdSexNEQ applies the NEQ predicate on the "std_sex" field.
func StdSexNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdSex), v))
	})
}

// StdSexIn applies the In predicate on the "std_sex" field.
func StdSexIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdSex), v...))
	})
}

// StdSexNotIn applies the NotIn predicate on the "std_sex" field.
func StdSexNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdSex), v...))
	})
}

// StdSexGT applies the GT predicate on the "std_sex" field.
func StdSexGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdSex), v))
	})
}

// StdSexGTE applies the GTE predicate on the "std_sex" field.
func StdSexGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdSex), v))
	})
}

// StdSexLT applies the LT predicate on the "std_sex" field.
func StdSexLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdSex), v))
	})
}

// StdSexLTE applies the LTE predicate on the "std_sex" field.
func StdSexLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdSex), v))
	})
}

// StdSexContains applies the Contains predicate on the "std_sex" field.
func StdSexContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdSex), v))
	})
}

// StdSexHasPrefix applies the HasPrefix predicate on the "std_sex" field.
func StdSexHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdSex), v))
	})
}

// StdSexHasSuffix applies the HasSuffix predicate on the "std_sex" field.
func StdSexHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdSex), v))
	})
}

// StdSexEqualFold applies the EqualFold predicate on the "std_sex" field.
func StdSexEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdSex), v))
	})
}

// StdSexContainsFold applies the ContainsFold predicate on the "std_sex" field.
func StdSexContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdSex), v))
	})
}

// StdRegNoEQ applies the EQ predicate on the "std_reg_no" field.
func StdRegNoEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoNEQ applies the NEQ predicate on the "std_reg_no" field.
func StdRegNoNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoIn applies the In predicate on the "std_reg_no" field.
func StdRegNoIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdRegNo), v...))
	})
}

// StdRegNoNotIn applies the NotIn predicate on the "std_reg_no" field.
func StdRegNoNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdRegNo), v...))
	})
}

// StdRegNoGT applies the GT predicate on the "std_reg_no" field.
func StdRegNoGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoGTE applies the GTE predicate on the "std_reg_no" field.
func StdRegNoGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoLT applies the LT predicate on the "std_reg_no" field.
func StdRegNoLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoLTE applies the LTE predicate on the "std_reg_no" field.
func StdRegNoLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoContains applies the Contains predicate on the "std_reg_no" field.
func StdRegNoContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoHasPrefix applies the HasPrefix predicate on the "std_reg_no" field.
func StdRegNoHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoHasSuffix applies the HasSuffix predicate on the "std_reg_no" field.
func StdRegNoHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoEqualFold applies the EqualFold predicate on the "std_reg_no" field.
func StdRegNoEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdRegNo), v))
	})
}

// StdRegNoContainsFold applies the ContainsFold predicate on the "std_reg_no" field.
func StdRegNoContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdRegNo), v))
	})
}

// StdAdmNoEQ applies the EQ predicate on the "std_adm_no" field.
func StdAdmNoEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoNEQ applies the NEQ predicate on the "std_adm_no" field.
func StdAdmNoNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoIn applies the In predicate on the "std_adm_no" field.
func StdAdmNoIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdAdmNo), v...))
	})
}

// StdAdmNoNotIn applies the NotIn predicate on the "std_adm_no" field.
func StdAdmNoNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdAdmNo), v...))
	})
}

// StdAdmNoGT applies the GT predicate on the "std_adm_no" field.
func StdAdmNoGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoGTE applies the GTE predicate on the "std_adm_no" field.
func StdAdmNoGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoLT applies the LT predicate on the "std_adm_no" field.
func StdAdmNoLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoLTE applies the LTE predicate on the "std_adm_no" field.
func StdAdmNoLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoContains applies the Contains predicate on the "std_adm_no" field.
func StdAdmNoContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoHasPrefix applies the HasPrefix predicate on the "std_adm_no" field.
func StdAdmNoHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoHasSuffix applies the HasSuffix predicate on the "std_adm_no" field.
func StdAdmNoHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoEqualFold applies the EqualFold predicate on the "std_adm_no" field.
func StdAdmNoEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdAdmNo), v))
	})
}

// StdAdmNoContainsFold applies the ContainsFold predicate on the "std_adm_no" field.
func StdAdmNoContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdAdmNo), v))
	})
}

// StdDoaEQ applies the EQ predicate on the "std_doa" field.
func StdDoaEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdDoa), v))
	})
}

// StdDoaNEQ applies the NEQ predicate on the "std_doa" field.
func StdDoaNEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdDoa), v))
	})
}

// StdDoaIn applies the In predicate on the "std_doa" field.
func StdDoaIn(vs ...time.Time) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdDoa), v...))
	})
}

// StdDoaNotIn applies the NotIn predicate on the "std_doa" field.
func StdDoaNotIn(vs ...time.Time) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdDoa), v...))
	})
}

// StdDoaGT applies the GT predicate on the "std_doa" field.
func StdDoaGT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdDoa), v))
	})
}

// StdDoaGTE applies the GTE predicate on the "std_doa" field.
func StdDoaGTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdDoa), v))
	})
}

// StdDoaLT applies the LT predicate on the "std_doa" field.
func StdDoaLT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdDoa), v))
	})
}

// StdDoaLTE applies the LTE predicate on the "std_doa" field.
func StdDoaLTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdDoa), v))
	})
}

// StdDoaIsNil applies the IsNil predicate on the "std_doa" field.
func StdDoaIsNil() predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStdDoa)))
	})
}

// StdDoaNotNil applies the NotNil predicate on the "std_doa" field.
func StdDoaNotNil() predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStdDoa)))
	})
}

// StdFresherEQ applies the EQ predicate on the "std_fresher" field.
func StdFresherEQ(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFresher), v))
	})
}

// StdFresherNEQ applies the NEQ predicate on the "std_fresher" field.
func StdFresherNEQ(v bool) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdFresher), v))
	})
}

// StdDobEQ applies the EQ predicate on the "std_dob" field.
func StdDobEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdDob), v))
	})
}

// StdDobNEQ applies the NEQ predicate on the "std_dob" field.
func StdDobNEQ(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdDob), v))
	})
}

// StdDobIn applies the In predicate on the "std_dob" field.
func StdDobIn(vs ...time.Time) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdDob), v...))
	})
}

// StdDobNotIn applies the NotIn predicate on the "std_dob" field.
func StdDobNotIn(vs ...time.Time) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdDob), v...))
	})
}

// StdDobGT applies the GT predicate on the "std_dob" field.
func StdDobGT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdDob), v))
	})
}

// StdDobGTE applies the GTE predicate on the "std_dob" field.
func StdDobGTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdDob), v))
	})
}

// StdDobLT applies the LT predicate on the "std_dob" field.
func StdDobLT(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdDob), v))
	})
}

// StdDobLTE applies the LTE predicate on the "std_dob" field.
func StdDobLTE(v time.Time) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdDob), v))
	})
}

// StdDobIsNil applies the IsNil predicate on the "std_dob" field.
func StdDobIsNil() predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStdDob)))
	})
}

// StdDobNotNil applies the NotNil predicate on the "std_dob" field.
func StdDobNotNil() predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStdDob)))
	})
}

// StdEmailEQ applies the EQ predicate on the "std_email" field.
func StdEmailEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdEmail), v))
	})
}

// StdEmailNEQ applies the NEQ predicate on the "std_email" field.
func StdEmailNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdEmail), v))
	})
}

// StdEmailIn applies the In predicate on the "std_email" field.
func StdEmailIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdEmail), v...))
	})
}

// StdEmailNotIn applies the NotIn predicate on the "std_email" field.
func StdEmailNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdEmail), v...))
	})
}

// StdEmailGT applies the GT predicate on the "std_email" field.
func StdEmailGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdEmail), v))
	})
}

// StdEmailGTE applies the GTE predicate on the "std_email" field.
func StdEmailGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdEmail), v))
	})
}

// StdEmailLT applies the LT predicate on the "std_email" field.
func StdEmailLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdEmail), v))
	})
}

// StdEmailLTE applies the LTE predicate on the "std_email" field.
func StdEmailLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdEmail), v))
	})
}

// StdEmailContains applies the Contains predicate on the "std_email" field.
func StdEmailContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdEmail), v))
	})
}

// StdEmailHasPrefix applies the HasPrefix predicate on the "std_email" field.
func StdEmailHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdEmail), v))
	})
}

// StdEmailHasSuffix applies the HasSuffix predicate on the "std_email" field.
func StdEmailHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdEmail), v))
	})
}

// StdEmailEqualFold applies the EqualFold predicate on the "std_email" field.
func StdEmailEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdEmail), v))
	})
}

// StdEmailContainsFold applies the ContainsFold predicate on the "std_email" field.
func StdEmailContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdEmail), v))
	})
}

// StdMobileEQ applies the EQ predicate on the "std_mobile" field.
func StdMobileEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMobile), v))
	})
}

// StdMobileNEQ applies the NEQ predicate on the "std_mobile" field.
func StdMobileNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdMobile), v))
	})
}

// StdMobileIn applies the In predicate on the "std_mobile" field.
func StdMobileIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdMobile), v...))
	})
}

// StdMobileNotIn applies the NotIn predicate on the "std_mobile" field.
func StdMobileNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdMobile), v...))
	})
}

// StdMobileGT applies the GT predicate on the "std_mobile" field.
func StdMobileGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdMobile), v))
	})
}

// StdMobileGTE applies the GTE predicate on the "std_mobile" field.
func StdMobileGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdMobile), v))
	})
}

// StdMobileLT applies the LT predicate on the "std_mobile" field.
func StdMobileLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdMobile), v))
	})
}

// StdMobileLTE applies the LTE predicate on the "std_mobile" field.
func StdMobileLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdMobile), v))
	})
}

// StdMobileContains applies the Contains predicate on the "std_mobile" field.
func StdMobileContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdMobile), v))
	})
}

// StdMobileHasPrefix applies the HasPrefix predicate on the "std_mobile" field.
func StdMobileHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdMobile), v))
	})
}

// StdMobileHasSuffix applies the HasSuffix predicate on the "std_mobile" field.
func StdMobileHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdMobile), v))
	})
}

// StdMobileEqualFold applies the EqualFold predicate on the "std_mobile" field.
func StdMobileEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdMobile), v))
	})
}

// StdMobileContainsFold applies the ContainsFold predicate on the "std_mobile" field.
func StdMobileContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdMobile), v))
	})
}

// StdFatherNameEQ applies the EQ predicate on the "std_father_name" field.
func StdFatherNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameNEQ applies the NEQ predicate on the "std_father_name" field.
func StdFatherNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameIn applies the In predicate on the "std_father_name" field.
func StdFatherNameIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdFatherName), v...))
	})
}

// StdFatherNameNotIn applies the NotIn predicate on the "std_father_name" field.
func StdFatherNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdFatherName), v...))
	})
}

// StdFatherNameGT applies the GT predicate on the "std_father_name" field.
func StdFatherNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameGTE applies the GTE predicate on the "std_father_name" field.
func StdFatherNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameLT applies the LT predicate on the "std_father_name" field.
func StdFatherNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameLTE applies the LTE predicate on the "std_father_name" field.
func StdFatherNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameContains applies the Contains predicate on the "std_father_name" field.
func StdFatherNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameHasPrefix applies the HasPrefix predicate on the "std_father_name" field.
func StdFatherNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameHasSuffix applies the HasSuffix predicate on the "std_father_name" field.
func StdFatherNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameEqualFold applies the EqualFold predicate on the "std_father_name" field.
func StdFatherNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdFatherName), v))
	})
}

// StdFatherNameContainsFold applies the ContainsFold predicate on the "std_father_name" field.
func StdFatherNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdFatherName), v))
	})
}

// StdMotherNameEQ applies the EQ predicate on the "std_mother_name" field.
func StdMotherNameEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameNEQ applies the NEQ predicate on the "std_mother_name" field.
func StdMotherNameNEQ(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameIn applies the In predicate on the "std_mother_name" field.
func StdMotherNameIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStdMotherName), v...))
	})
}

// StdMotherNameNotIn applies the NotIn predicate on the "std_mother_name" field.
func StdMotherNameNotIn(vs ...string) predicate.MstStudent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStdMotherName), v...))
	})
}

// StdMotherNameGT applies the GT predicate on the "std_mother_name" field.
func StdMotherNameGT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameGTE applies the GTE predicate on the "std_mother_name" field.
func StdMotherNameGTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameLT applies the LT predicate on the "std_mother_name" field.
func StdMotherNameLT(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameLTE applies the LTE predicate on the "std_mother_name" field.
func StdMotherNameLTE(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameContains applies the Contains predicate on the "std_mother_name" field.
func StdMotherNameContains(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameHasPrefix applies the HasPrefix predicate on the "std_mother_name" field.
func StdMotherNameHasPrefix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameHasSuffix applies the HasSuffix predicate on the "std_mother_name" field.
func StdMotherNameHasSuffix(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameEqualFold applies the EqualFold predicate on the "std_mother_name" field.
func StdMotherNameEqualFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStdMotherName), v))
	})
}

// StdMotherNameContainsFold applies the ContainsFold predicate on the "std_mother_name" field.
func StdMotherNameContainsFold(v string) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStdMotherName), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MstStudent) predicate.MstStudent {
	return predicate.MstStudent(func(s *sql.Selector) {
		p(s.Not())
	})
}
