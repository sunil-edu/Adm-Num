// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/mststudent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MstStudent is the model entity for the MstStudent schema.
type MstStudent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// StdStudying holds the value of the "std_studying" field.
	StdStudying bool `json:"std_studying,omitempty"`
	// StdStatus holds the value of the "std_status" field.
	StdStatus string `json:"std_status,omitempty"`
	// StdSex holds the value of the "std_sex" field.
	StdSex string `json:"std_sex,omitempty"`
	// StdRegNo holds the value of the "std_reg_no" field.
	StdRegNo string `json:"std_reg_no,omitempty"`
	// StdAdmNo holds the value of the "std_adm_no" field.
	StdAdmNo string `json:"std_adm_no,omitempty"`
	// StdDoa holds the value of the "std_doa" field.
	StdDoa *time.Time `json:"std_doa,omitempty"`
	// StdFresher holds the value of the "std_fresher" field.
	StdFresher bool `json:"std_fresher,omitempty"`
	// StdDob holds the value of the "std_dob" field.
	StdDob *time.Time `json:"std_dob,omitempty"`
	// StdEmail holds the value of the "std_email" field.
	StdEmail string `json:"std_email,omitempty"`
	// StdMobile holds the value of the "std_mobile" field.
	StdMobile string `json:"std_mobile,omitempty"`
	// StdFatherName holds the value of the "std_father_name" field.
	StdFatherName string `json:"std_father_name,omitempty"`
	// StdMotherName holds the value of the "std_mother_name" field.
	StdMotherName string `json:"std_mother_name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MstStudent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mststudent.FieldStdStudying, mststudent.FieldStdFresher:
			values[i] = new(sql.NullBool)
		case mststudent.FieldID:
			values[i] = new(sql.NullInt64)
		case mststudent.FieldFirstName, mststudent.FieldMiddleName, mststudent.FieldLastName, mststudent.FieldStdStatus, mststudent.FieldStdSex, mststudent.FieldStdRegNo, mststudent.FieldStdAdmNo, mststudent.FieldStdEmail, mststudent.FieldStdMobile, mststudent.FieldStdFatherName, mststudent.FieldStdMotherName:
			values[i] = new(sql.NullString)
		case mststudent.FieldStdDoa, mststudent.FieldStdDob:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MstStudent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MstStudent fields.
func (ms *MstStudent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mststudent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case mststudent.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				ms.FirstName = value.String
			}
		case mststudent.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				ms.MiddleName = value.String
			}
		case mststudent.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				ms.LastName = value.String
			}
		case mststudent.FieldStdStudying:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field std_studying", values[i])
			} else if value.Valid {
				ms.StdStudying = value.Bool
			}
		case mststudent.FieldStdStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_status", values[i])
			} else if value.Valid {
				ms.StdStatus = value.String
			}
		case mststudent.FieldStdSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_sex", values[i])
			} else if value.Valid {
				ms.StdSex = value.String
			}
		case mststudent.FieldStdRegNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_reg_no", values[i])
			} else if value.Valid {
				ms.StdRegNo = value.String
			}
		case mststudent.FieldStdAdmNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_adm_no", values[i])
			} else if value.Valid {
				ms.StdAdmNo = value.String
			}
		case mststudent.FieldStdDoa:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field std_doa", values[i])
			} else if value.Valid {
				ms.StdDoa = new(time.Time)
				*ms.StdDoa = value.Time
			}
		case mststudent.FieldStdFresher:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field std_fresher", values[i])
			} else if value.Valid {
				ms.StdFresher = value.Bool
			}
		case mststudent.FieldStdDob:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field std_dob", values[i])
			} else if value.Valid {
				ms.StdDob = new(time.Time)
				*ms.StdDob = value.Time
			}
		case mststudent.FieldStdEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_email", values[i])
			} else if value.Valid {
				ms.StdEmail = value.String
			}
		case mststudent.FieldStdMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_mobile", values[i])
			} else if value.Valid {
				ms.StdMobile = value.String
			}
		case mststudent.FieldStdFatherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_father_name", values[i])
			} else if value.Valid {
				ms.StdFatherName = value.String
			}
		case mststudent.FieldStdMotherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field std_mother_name", values[i])
			} else if value.Valid {
				ms.StdMotherName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MstStudent.
// Note that you need to call MstStudent.Unwrap() before calling this method if this MstStudent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MstStudent) Update() *MstStudentUpdateOne {
	return (&MstStudentClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the MstStudent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MstStudent) Unwrap() *MstStudent {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MstStudent is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MstStudent) String() string {
	var builder strings.Builder
	builder.WriteString("MstStudent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("first_name=")
	builder.WriteString(ms.FirstName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(ms.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(ms.LastName)
	builder.WriteString(", ")
	builder.WriteString("std_studying=")
	builder.WriteString(fmt.Sprintf("%v", ms.StdStudying))
	builder.WriteString(", ")
	builder.WriteString("std_status=")
	builder.WriteString(ms.StdStatus)
	builder.WriteString(", ")
	builder.WriteString("std_sex=")
	builder.WriteString(ms.StdSex)
	builder.WriteString(", ")
	builder.WriteString("std_reg_no=")
	builder.WriteString(ms.StdRegNo)
	builder.WriteString(", ")
	builder.WriteString("std_adm_no=")
	builder.WriteString(ms.StdAdmNo)
	builder.WriteString(", ")
	if v := ms.StdDoa; v != nil {
		builder.WriteString("std_doa=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("std_fresher=")
	builder.WriteString(fmt.Sprintf("%v", ms.StdFresher))
	builder.WriteString(", ")
	if v := ms.StdDob; v != nil {
		builder.WriteString("std_dob=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("std_email=")
	builder.WriteString(ms.StdEmail)
	builder.WriteString(", ")
	builder.WriteString("std_mobile=")
	builder.WriteString(ms.StdMobile)
	builder.WriteString(", ")
	builder.WriteString("std_father_name=")
	builder.WriteString(ms.StdFatherName)
	builder.WriteString(", ")
	builder.WriteString("std_mother_name=")
	builder.WriteString(ms.StdMotherName)
	builder.WriteByte(')')
	return builder.String()
}

// MstStudents is a parsable slice of MstStudent.
type MstStudents []*MstStudent

func (ms MstStudents) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
