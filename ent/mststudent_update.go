// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/mststudent"
	"adm-num/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstStudentUpdate is the builder for updating MstStudent entities.
type MstStudentUpdate struct {
	config
	hooks     []Hook
	mutation  *MstStudentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MstStudentUpdate builder.
func (msu *MstStudentUpdate) Where(ps ...predicate.MstStudent) *MstStudentUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetFirstName sets the "first_name" field.
func (msu *MstStudentUpdate) SetFirstName(s string) *MstStudentUpdate {
	msu.mutation.SetFirstName(s)
	return msu
}

// SetMiddleName sets the "middle_name" field.
func (msu *MstStudentUpdate) SetMiddleName(s string) *MstStudentUpdate {
	msu.mutation.SetMiddleName(s)
	return msu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableMiddleName(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetMiddleName(*s)
	}
	return msu
}

// SetLastName sets the "last_name" field.
func (msu *MstStudentUpdate) SetLastName(s string) *MstStudentUpdate {
	msu.mutation.SetLastName(s)
	return msu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableLastName(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetLastName(*s)
	}
	return msu
}

// SetStdStudying sets the "std_studying" field.
func (msu *MstStudentUpdate) SetStdStudying(b bool) *MstStudentUpdate {
	msu.mutation.SetStdStudying(b)
	return msu
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdStudying(b *bool) *MstStudentUpdate {
	if b != nil {
		msu.SetStdStudying(*b)
	}
	return msu
}

// SetStdStatus sets the "std_status" field.
func (msu *MstStudentUpdate) SetStdStatus(s string) *MstStudentUpdate {
	msu.mutation.SetStdStatus(s)
	return msu
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdStatus(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdStatus(*s)
	}
	return msu
}

// SetStdSex sets the "std_sex" field.
func (msu *MstStudentUpdate) SetStdSex(s string) *MstStudentUpdate {
	msu.mutation.SetStdSex(s)
	return msu
}

// SetNillableStdSex sets the "std_sex" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdSex(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdSex(*s)
	}
	return msu
}

// SetStdRegNo sets the "std_reg_no" field.
func (msu *MstStudentUpdate) SetStdRegNo(s string) *MstStudentUpdate {
	msu.mutation.SetStdRegNo(s)
	return msu
}

// SetNillableStdRegNo sets the "std_reg_no" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdRegNo(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdRegNo(*s)
	}
	return msu
}

// SetStdAdmNo sets the "std_adm_no" field.
func (msu *MstStudentUpdate) SetStdAdmNo(s string) *MstStudentUpdate {
	msu.mutation.SetStdAdmNo(s)
	return msu
}

// SetNillableStdAdmNo sets the "std_adm_no" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdAdmNo(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdAdmNo(*s)
	}
	return msu
}

// SetStdDoa sets the "std_doa" field.
func (msu *MstStudentUpdate) SetStdDoa(t time.Time) *MstStudentUpdate {
	msu.mutation.SetStdDoa(t)
	return msu
}

// SetNillableStdDoa sets the "std_doa" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdDoa(t *time.Time) *MstStudentUpdate {
	if t != nil {
		msu.SetStdDoa(*t)
	}
	return msu
}

// ClearStdDoa clears the value of the "std_doa" field.
func (msu *MstStudentUpdate) ClearStdDoa() *MstStudentUpdate {
	msu.mutation.ClearStdDoa()
	return msu
}

// SetStdFresher sets the "std_fresher" field.
func (msu *MstStudentUpdate) SetStdFresher(b bool) *MstStudentUpdate {
	msu.mutation.SetStdFresher(b)
	return msu
}

// SetNillableStdFresher sets the "std_fresher" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdFresher(b *bool) *MstStudentUpdate {
	if b != nil {
		msu.SetStdFresher(*b)
	}
	return msu
}

// SetStdDob sets the "std_dob" field.
func (msu *MstStudentUpdate) SetStdDob(t time.Time) *MstStudentUpdate {
	msu.mutation.SetStdDob(t)
	return msu
}

// SetNillableStdDob sets the "std_dob" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdDob(t *time.Time) *MstStudentUpdate {
	if t != nil {
		msu.SetStdDob(*t)
	}
	return msu
}

// ClearStdDob clears the value of the "std_dob" field.
func (msu *MstStudentUpdate) ClearStdDob() *MstStudentUpdate {
	msu.mutation.ClearStdDob()
	return msu
}

// SetStdEmail sets the "std_email" field.
func (msu *MstStudentUpdate) SetStdEmail(s string) *MstStudentUpdate {
	msu.mutation.SetStdEmail(s)
	return msu
}

// SetStdMobile sets the "std_mobile" field.
func (msu *MstStudentUpdate) SetStdMobile(s string) *MstStudentUpdate {
	msu.mutation.SetStdMobile(s)
	return msu
}

// SetStdFatherName sets the "std_father_name" field.
func (msu *MstStudentUpdate) SetStdFatherName(s string) *MstStudentUpdate {
	msu.mutation.SetStdFatherName(s)
	return msu
}

// SetNillableStdFatherName sets the "std_father_name" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdFatherName(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdFatherName(*s)
	}
	return msu
}

// SetStdMotherName sets the "std_mother_name" field.
func (msu *MstStudentUpdate) SetStdMotherName(s string) *MstStudentUpdate {
	msu.mutation.SetStdMotherName(s)
	return msu
}

// SetNillableStdMotherName sets the "std_mother_name" field if the given value is not nil.
func (msu *MstStudentUpdate) SetNillableStdMotherName(s *string) *MstStudentUpdate {
	if s != nil {
		msu.SetStdMotherName(*s)
	}
	return msu
}

// Mutation returns the MstStudentMutation object of the builder.
func (msu *MstStudentUpdate) Mutation() *MstStudentMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MstStudentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(msu.hooks) == 0 {
		if err = msu.check(); err != nil {
			return 0, err
		}
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msu.check(); err != nil {
				return 0, err
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MstStudentUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MstStudentUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MstStudentUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MstStudentUpdate) check() error {
	if v, ok := msu.mutation.FirstName(); ok {
		if err := mststudent.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.first_name": %w`, err)}
		}
	}
	if v, ok := msu.mutation.StdEmail(); ok {
		if err := mststudent.StdEmailValidator(v); err != nil {
			return &ValidationError{Name: "std_email", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_email": %w`, err)}
		}
	}
	if v, ok := msu.mutation.StdMobile(); ok {
		if err := mststudent.StdMobileValidator(v); err != nil {
			return &ValidationError{Name: "std_mobile", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_mobile": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msu *MstStudentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MstStudentUpdate {
	msu.modifiers = append(msu.modifiers, modifiers...)
	return msu
}

func (msu *MstStudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mststudent.Table,
			Columns: mststudent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldFirstName,
		})
	}
	if value, ok := msu.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldMiddleName,
		})
	}
	if value, ok := msu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldLastName,
		})
	}
	if value, ok := msu.mutation.StdStudying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
	}
	if value, ok := msu.mutation.StdStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
	}
	if value, ok := msu.mutation.StdSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
	}
	if value, ok := msu.mutation.StdRegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
	}
	if value, ok := msu.mutation.StdAdmNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdAdmNo,
		})
	}
	if value, ok := msu.mutation.StdDoa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDoa,
		})
	}
	if msu.mutation.StdDoaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mststudent.FieldStdDoa,
		})
	}
	if value, ok := msu.mutation.StdFresher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdFresher,
		})
	}
	if value, ok := msu.mutation.StdDob(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDob,
		})
	}
	if msu.mutation.StdDobCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mststudent.FieldStdDob,
		})
	}
	if value, ok := msu.mutation.StdEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdEmail,
		})
	}
	if value, ok := msu.mutation.StdMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMobile,
		})
	}
	if value, ok := msu.mutation.StdFatherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFatherName,
		})
	}
	if value, ok := msu.mutation.StdMotherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMotherName,
		})
	}
	_spec.Modifiers = msu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mststudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MstStudentUpdateOne is the builder for updating a single MstStudent entity.
type MstStudentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MstStudentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFirstName sets the "first_name" field.
func (msuo *MstStudentUpdateOne) SetFirstName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetFirstName(s)
	return msuo
}

// SetMiddleName sets the "middle_name" field.
func (msuo *MstStudentUpdateOne) SetMiddleName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetMiddleName(s)
	return msuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableMiddleName(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetMiddleName(*s)
	}
	return msuo
}

// SetLastName sets the "last_name" field.
func (msuo *MstStudentUpdateOne) SetLastName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetLastName(s)
	return msuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableLastName(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetLastName(*s)
	}
	return msuo
}

// SetStdStudying sets the "std_studying" field.
func (msuo *MstStudentUpdateOne) SetStdStudying(b bool) *MstStudentUpdateOne {
	msuo.mutation.SetStdStudying(b)
	return msuo
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdStudying(b *bool) *MstStudentUpdateOne {
	if b != nil {
		msuo.SetStdStudying(*b)
	}
	return msuo
}

// SetStdStatus sets the "std_status" field.
func (msuo *MstStudentUpdateOne) SetStdStatus(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdStatus(s)
	return msuo
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdStatus(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdStatus(*s)
	}
	return msuo
}

// SetStdSex sets the "std_sex" field.
func (msuo *MstStudentUpdateOne) SetStdSex(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdSex(s)
	return msuo
}

// SetNillableStdSex sets the "std_sex" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdSex(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdSex(*s)
	}
	return msuo
}

// SetStdRegNo sets the "std_reg_no" field.
func (msuo *MstStudentUpdateOne) SetStdRegNo(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdRegNo(s)
	return msuo
}

// SetNillableStdRegNo sets the "std_reg_no" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdRegNo(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdRegNo(*s)
	}
	return msuo
}

// SetStdAdmNo sets the "std_adm_no" field.
func (msuo *MstStudentUpdateOne) SetStdAdmNo(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdAdmNo(s)
	return msuo
}

// SetNillableStdAdmNo sets the "std_adm_no" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdAdmNo(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdAdmNo(*s)
	}
	return msuo
}

// SetStdDoa sets the "std_doa" field.
func (msuo *MstStudentUpdateOne) SetStdDoa(t time.Time) *MstStudentUpdateOne {
	msuo.mutation.SetStdDoa(t)
	return msuo
}

// SetNillableStdDoa sets the "std_doa" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdDoa(t *time.Time) *MstStudentUpdateOne {
	if t != nil {
		msuo.SetStdDoa(*t)
	}
	return msuo
}

// ClearStdDoa clears the value of the "std_doa" field.
func (msuo *MstStudentUpdateOne) ClearStdDoa() *MstStudentUpdateOne {
	msuo.mutation.ClearStdDoa()
	return msuo
}

// SetStdFresher sets the "std_fresher" field.
func (msuo *MstStudentUpdateOne) SetStdFresher(b bool) *MstStudentUpdateOne {
	msuo.mutation.SetStdFresher(b)
	return msuo
}

// SetNillableStdFresher sets the "std_fresher" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdFresher(b *bool) *MstStudentUpdateOne {
	if b != nil {
		msuo.SetStdFresher(*b)
	}
	return msuo
}

// SetStdDob sets the "std_dob" field.
func (msuo *MstStudentUpdateOne) SetStdDob(t time.Time) *MstStudentUpdateOne {
	msuo.mutation.SetStdDob(t)
	return msuo
}

// SetNillableStdDob sets the "std_dob" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdDob(t *time.Time) *MstStudentUpdateOne {
	if t != nil {
		msuo.SetStdDob(*t)
	}
	return msuo
}

// ClearStdDob clears the value of the "std_dob" field.
func (msuo *MstStudentUpdateOne) ClearStdDob() *MstStudentUpdateOne {
	msuo.mutation.ClearStdDob()
	return msuo
}

// SetStdEmail sets the "std_email" field.
func (msuo *MstStudentUpdateOne) SetStdEmail(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdEmail(s)
	return msuo
}

// SetStdMobile sets the "std_mobile" field.
func (msuo *MstStudentUpdateOne) SetStdMobile(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdMobile(s)
	return msuo
}

// SetStdFatherName sets the "std_father_name" field.
func (msuo *MstStudentUpdateOne) SetStdFatherName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdFatherName(s)
	return msuo
}

// SetNillableStdFatherName sets the "std_father_name" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdFatherName(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdFatherName(*s)
	}
	return msuo
}

// SetStdMotherName sets the "std_mother_name" field.
func (msuo *MstStudentUpdateOne) SetStdMotherName(s string) *MstStudentUpdateOne {
	msuo.mutation.SetStdMotherName(s)
	return msuo
}

// SetNillableStdMotherName sets the "std_mother_name" field if the given value is not nil.
func (msuo *MstStudentUpdateOne) SetNillableStdMotherName(s *string) *MstStudentUpdateOne {
	if s != nil {
		msuo.SetStdMotherName(*s)
	}
	return msuo
}

// Mutation returns the MstStudentMutation object of the builder.
func (msuo *MstStudentUpdateOne) Mutation() *MstStudentMutation {
	return msuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MstStudentUpdateOne) Select(field string, fields ...string) *MstStudentUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MstStudent entity.
func (msuo *MstStudentUpdateOne) Save(ctx context.Context) (*MstStudent, error) {
	var (
		err  error
		node *MstStudent
	)
	if len(msuo.hooks) == 0 {
		if err = msuo.check(); err != nil {
			return nil, err
		}
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msuo.check(); err != nil {
				return nil, err
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, msuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MstStudent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MstStudentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MstStudentUpdateOne) SaveX(ctx context.Context) *MstStudent {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MstStudentUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MstStudentUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MstStudentUpdateOne) check() error {
	if v, ok := msuo.mutation.FirstName(); ok {
		if err := mststudent.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.first_name": %w`, err)}
		}
	}
	if v, ok := msuo.mutation.StdEmail(); ok {
		if err := mststudent.StdEmailValidator(v); err != nil {
			return &ValidationError{Name: "std_email", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_email": %w`, err)}
		}
	}
	if v, ok := msuo.mutation.StdMobile(); ok {
		if err := mststudent.StdMobileValidator(v); err != nil {
			return &ValidationError{Name: "std_mobile", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_mobile": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msuo *MstStudentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MstStudentUpdateOne {
	msuo.modifiers = append(msuo.modifiers, modifiers...)
	return msuo
}

func (msuo *MstStudentUpdateOne) sqlSave(ctx context.Context) (_node *MstStudent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mststudent.Table,
			Columns: mststudent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MstStudent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mststudent.FieldID)
		for _, f := range fields {
			if !mststudent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mststudent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldFirstName,
		})
	}
	if value, ok := msuo.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldMiddleName,
		})
	}
	if value, ok := msuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldLastName,
		})
	}
	if value, ok := msuo.mutation.StdStudying(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
	}
	if value, ok := msuo.mutation.StdStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
	}
	if value, ok := msuo.mutation.StdSex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
	}
	if value, ok := msuo.mutation.StdRegNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
	}
	if value, ok := msuo.mutation.StdAdmNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdAdmNo,
		})
	}
	if value, ok := msuo.mutation.StdDoa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDoa,
		})
	}
	if msuo.mutation.StdDoaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mststudent.FieldStdDoa,
		})
	}
	if value, ok := msuo.mutation.StdFresher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdFresher,
		})
	}
	if value, ok := msuo.mutation.StdDob(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDob,
		})
	}
	if msuo.mutation.StdDobCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mststudent.FieldStdDob,
		})
	}
	if value, ok := msuo.mutation.StdEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdEmail,
		})
	}
	if value, ok := msuo.mutation.StdMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMobile,
		})
	}
	if value, ok := msuo.mutation.StdFatherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFatherName,
		})
	}
	if value, ok := msuo.mutation.StdMotherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMotherName,
		})
	}
	_spec.Modifiers = msuo.modifiers
	_node = &MstStudent{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mststudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
