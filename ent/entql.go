// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/admnumber"
	"adm-num/ent/mststudent"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   admnumber.Table,
			Columns: admnumber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admnumber.FieldID,
			},
		},
		Type: "AdmNumber",
		Fields: map[string]*sqlgraph.FieldSpec{
			admnumber.FieldAdmStartNo:      {Type: field.TypeString, Column: admnumber.FieldAdmStartNo},
			admnumber.FieldAdmCurrentNo:    {Type: field.TypeString, Column: admnumber.FieldAdmCurrentNo},
			admnumber.FieldIsPrefixed:      {Type: field.TypeBool, Column: admnumber.FieldIsPrefixed},
			admnumber.FieldPrefixStr:       {Type: field.TypeString, Column: admnumber.FieldPrefixStr},
			admnumber.FieldSuffixStr:       {Type: field.TypeString, Column: admnumber.FieldSuffixStr},
			admnumber.FieldSeparator:       {Type: field.TypeString, Column: admnumber.FieldSeparator},
			admnumber.FieldPrefillWithZero: {Type: field.TypeBool, Column: admnumber.FieldPrefillWithZero},
			admnumber.FieldPrefillWidth:    {Type: field.TypeInt, Column: admnumber.FieldPrefillWidth},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mststudent.Table,
			Columns: mststudent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		},
		Type: "MstStudent",
		Fields: map[string]*sqlgraph.FieldSpec{
			mststudent.FieldFirstName:     {Type: field.TypeString, Column: mststudent.FieldFirstName},
			mststudent.FieldMiddleName:    {Type: field.TypeString, Column: mststudent.FieldMiddleName},
			mststudent.FieldLastName:      {Type: field.TypeString, Column: mststudent.FieldLastName},
			mststudent.FieldStdStudying:   {Type: field.TypeBool, Column: mststudent.FieldStdStudying},
			mststudent.FieldStdStatus:     {Type: field.TypeString, Column: mststudent.FieldStdStatus},
			mststudent.FieldStdSex:        {Type: field.TypeString, Column: mststudent.FieldStdSex},
			mststudent.FieldStdRegNo:      {Type: field.TypeString, Column: mststudent.FieldStdRegNo},
			mststudent.FieldStdAdmNo:      {Type: field.TypeString, Column: mststudent.FieldStdAdmNo},
			mststudent.FieldStdDoa:        {Type: field.TypeTime, Column: mststudent.FieldStdDoa},
			mststudent.FieldStdFresher:    {Type: field.TypeBool, Column: mststudent.FieldStdFresher},
			mststudent.FieldStdDob:        {Type: field.TypeTime, Column: mststudent.FieldStdDob},
			mststudent.FieldStdEmail:      {Type: field.TypeString, Column: mststudent.FieldStdEmail},
			mststudent.FieldStdMobile:     {Type: field.TypeString, Column: mststudent.FieldStdMobile},
			mststudent.FieldStdFatherName: {Type: field.TypeString, Column: mststudent.FieldStdFatherName},
			mststudent.FieldStdMotherName: {Type: field.TypeString, Column: mststudent.FieldStdMotherName},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (anq *AdmNumberQuery) addPredicate(pred func(s *sql.Selector)) {
	anq.predicates = append(anq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdmNumberQuery builder.
func (anq *AdmNumberQuery) Filter() *AdmNumberFilter {
	return &AdmNumberFilter{config: anq.config, predicateAdder: anq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdmNumberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdmNumberMutation builder.
func (m *AdmNumberMutation) Filter() *AdmNumberFilter {
	return &AdmNumberFilter{config: m.config, predicateAdder: m}
}

// AdmNumberFilter provides a generic filtering capability at runtime for AdmNumberQuery.
type AdmNumberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdmNumberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AdmNumberFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(admnumber.FieldID))
}

// WhereAdmStartNo applies the entql string predicate on the adm_start_no field.
func (f *AdmNumberFilter) WhereAdmStartNo(p entql.StringP) {
	f.Where(p.Field(admnumber.FieldAdmStartNo))
}

// WhereAdmCurrentNo applies the entql string predicate on the adm_current_no field.
func (f *AdmNumberFilter) WhereAdmCurrentNo(p entql.StringP) {
	f.Where(p.Field(admnumber.FieldAdmCurrentNo))
}

// WhereIsPrefixed applies the entql bool predicate on the is_prefixed field.
func (f *AdmNumberFilter) WhereIsPrefixed(p entql.BoolP) {
	f.Where(p.Field(admnumber.FieldIsPrefixed))
}

// WherePrefixStr applies the entql string predicate on the prefix_str field.
func (f *AdmNumberFilter) WherePrefixStr(p entql.StringP) {
	f.Where(p.Field(admnumber.FieldPrefixStr))
}

// WhereSuffixStr applies the entql string predicate on the suffix_str field.
func (f *AdmNumberFilter) WhereSuffixStr(p entql.StringP) {
	f.Where(p.Field(admnumber.FieldSuffixStr))
}

// WhereSeparator applies the entql string predicate on the separator field.
func (f *AdmNumberFilter) WhereSeparator(p entql.StringP) {
	f.Where(p.Field(admnumber.FieldSeparator))
}

// WherePrefillWithZero applies the entql bool predicate on the prefill_with_zero field.
func (f *AdmNumberFilter) WherePrefillWithZero(p entql.BoolP) {
	f.Where(p.Field(admnumber.FieldPrefillWithZero))
}

// WherePrefillWidth applies the entql int predicate on the prefill_width field.
func (f *AdmNumberFilter) WherePrefillWidth(p entql.IntP) {
	f.Where(p.Field(admnumber.FieldPrefillWidth))
}

// addPredicate implements the predicateAdder interface.
func (msq *MstStudentQuery) addPredicate(pred func(s *sql.Selector)) {
	msq.predicates = append(msq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MstStudentQuery builder.
func (msq *MstStudentQuery) Filter() *MstStudentFilter {
	return &MstStudentFilter{config: msq.config, predicateAdder: msq}
}

// addPredicate implements the predicateAdder interface.
func (m *MstStudentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MstStudentMutation builder.
func (m *MstStudentMutation) Filter() *MstStudentFilter {
	return &MstStudentFilter{config: m.config, predicateAdder: m}
}

// MstStudentFilter provides a generic filtering capability at runtime for MstStudentQuery.
type MstStudentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MstStudentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MstStudentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(mststudent.FieldID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *MstStudentFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldFirstName))
}

// WhereMiddleName applies the entql string predicate on the middle_name field.
func (f *MstStudentFilter) WhereMiddleName(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldMiddleName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *MstStudentFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldLastName))
}

// WhereStdStudying applies the entql bool predicate on the std_studying field.
func (f *MstStudentFilter) WhereStdStudying(p entql.BoolP) {
	f.Where(p.Field(mststudent.FieldStdStudying))
}

// WhereStdStatus applies the entql string predicate on the std_status field.
func (f *MstStudentFilter) WhereStdStatus(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdStatus))
}

// WhereStdSex applies the entql string predicate on the std_sex field.
func (f *MstStudentFilter) WhereStdSex(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdSex))
}

// WhereStdRegNo applies the entql string predicate on the std_reg_no field.
func (f *MstStudentFilter) WhereStdRegNo(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdRegNo))
}

// WhereStdAdmNo applies the entql string predicate on the std_adm_no field.
func (f *MstStudentFilter) WhereStdAdmNo(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdAdmNo))
}

// WhereStdDoa applies the entql time.Time predicate on the std_doa field.
func (f *MstStudentFilter) WhereStdDoa(p entql.TimeP) {
	f.Where(p.Field(mststudent.FieldStdDoa))
}

// WhereStdFresher applies the entql bool predicate on the std_fresher field.
func (f *MstStudentFilter) WhereStdFresher(p entql.BoolP) {
	f.Where(p.Field(mststudent.FieldStdFresher))
}

// WhereStdDob applies the entql time.Time predicate on the std_dob field.
func (f *MstStudentFilter) WhereStdDob(p entql.TimeP) {
	f.Where(p.Field(mststudent.FieldStdDob))
}

// WhereStdEmail applies the entql string predicate on the std_email field.
func (f *MstStudentFilter) WhereStdEmail(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdEmail))
}

// WhereStdMobile applies the entql string predicate on the std_mobile field.
func (f *MstStudentFilter) WhereStdMobile(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdMobile))
}

// WhereStdFatherName applies the entql string predicate on the std_father_name field.
func (f *MstStudentFilter) WhereStdFatherName(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdFatherName))
}

// WhereStdMotherName applies the entql string predicate on the std_mother_name field.
func (f *MstStudentFilter) WhereStdMotherName(p entql.StringP) {
	f.Where(p.Field(mststudent.FieldStdMotherName))
}
