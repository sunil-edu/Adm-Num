// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package admnumber

import (
	"adm-num/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AdmStartNo applies equality check predicate on the "adm_start_no" field. It's identical to AdmStartNoEQ.
func AdmStartNo(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdmStartNo), v))
	})
}

// AdmCurrentNo applies equality check predicate on the "adm_current_no" field. It's identical to AdmCurrentNoEQ.
func AdmCurrentNo(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdmCurrentNo), v))
	})
}

// IsPrefixed applies equality check predicate on the "is_prefixed" field. It's identical to IsPrefixedEQ.
func IsPrefixed(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPrefixed), v))
	})
}

// PrefixStr applies equality check predicate on the "prefix_str" field. It's identical to PrefixStrEQ.
func PrefixStr(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefixStr), v))
	})
}

// SuffixStr applies equality check predicate on the "suffix_str" field. It's identical to SuffixStrEQ.
func SuffixStr(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffixStr), v))
	})
}

// Separator applies equality check predicate on the "separator" field. It's identical to SeparatorEQ.
func Separator(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparator), v))
	})
}

// PrefillWithZero applies equality check predicate on the "prefill_with_zero" field. It's identical to PrefillWithZeroEQ.
func PrefillWithZero(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefillWithZero), v))
	})
}

// PrefillWidth applies equality check predicate on the "prefill_width" field. It's identical to PrefillWidthEQ.
func PrefillWidth(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefillWidth), v))
	})
}

// AdmStartNoEQ applies the EQ predicate on the "adm_start_no" field.
func AdmStartNoEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoNEQ applies the NEQ predicate on the "adm_start_no" field.
func AdmStartNoNEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoIn applies the In predicate on the "adm_start_no" field.
func AdmStartNoIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAdmStartNo), v...))
	})
}

// AdmStartNoNotIn applies the NotIn predicate on the "adm_start_no" field.
func AdmStartNoNotIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAdmStartNo), v...))
	})
}

// AdmStartNoGT applies the GT predicate on the "adm_start_no" field.
func AdmStartNoGT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoGTE applies the GTE predicate on the "adm_start_no" field.
func AdmStartNoGTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoLT applies the LT predicate on the "adm_start_no" field.
func AdmStartNoLT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoLTE applies the LTE predicate on the "adm_start_no" field.
func AdmStartNoLTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoContains applies the Contains predicate on the "adm_start_no" field.
func AdmStartNoContains(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoHasPrefix applies the HasPrefix predicate on the "adm_start_no" field.
func AdmStartNoHasPrefix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoHasSuffix applies the HasSuffix predicate on the "adm_start_no" field.
func AdmStartNoHasSuffix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoEqualFold applies the EqualFold predicate on the "adm_start_no" field.
func AdmStartNoEqualFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdmStartNo), v))
	})
}

// AdmStartNoContainsFold applies the ContainsFold predicate on the "adm_start_no" field.
func AdmStartNoContainsFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdmStartNo), v))
	})
}

// AdmCurrentNoEQ applies the EQ predicate on the "adm_current_no" field.
func AdmCurrentNoEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoNEQ applies the NEQ predicate on the "adm_current_no" field.
func AdmCurrentNoNEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoIn applies the In predicate on the "adm_current_no" field.
func AdmCurrentNoIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAdmCurrentNo), v...))
	})
}

// AdmCurrentNoNotIn applies the NotIn predicate on the "adm_current_no" field.
func AdmCurrentNoNotIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAdmCurrentNo), v...))
	})
}

// AdmCurrentNoGT applies the GT predicate on the "adm_current_no" field.
func AdmCurrentNoGT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoGTE applies the GTE predicate on the "adm_current_no" field.
func AdmCurrentNoGTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoLT applies the LT predicate on the "adm_current_no" field.
func AdmCurrentNoLT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoLTE applies the LTE predicate on the "adm_current_no" field.
func AdmCurrentNoLTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoContains applies the Contains predicate on the "adm_current_no" field.
func AdmCurrentNoContains(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoHasPrefix applies the HasPrefix predicate on the "adm_current_no" field.
func AdmCurrentNoHasPrefix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoHasSuffix applies the HasSuffix predicate on the "adm_current_no" field.
func AdmCurrentNoHasSuffix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoEqualFold applies the EqualFold predicate on the "adm_current_no" field.
func AdmCurrentNoEqualFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdmCurrentNo), v))
	})
}

// AdmCurrentNoContainsFold applies the ContainsFold predicate on the "adm_current_no" field.
func AdmCurrentNoContainsFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdmCurrentNo), v))
	})
}

// IsPrefixedEQ applies the EQ predicate on the "is_prefixed" field.
func IsPrefixedEQ(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPrefixed), v))
	})
}

// IsPrefixedNEQ applies the NEQ predicate on the "is_prefixed" field.
func IsPrefixedNEQ(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPrefixed), v))
	})
}

// PrefixStrEQ applies the EQ predicate on the "prefix_str" field.
func PrefixStrEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrNEQ applies the NEQ predicate on the "prefix_str" field.
func PrefixStrNEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrIn applies the In predicate on the "prefix_str" field.
func PrefixStrIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrefixStr), v...))
	})
}

// PrefixStrNotIn applies the NotIn predicate on the "prefix_str" field.
func PrefixStrNotIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrefixStr), v...))
	})
}

// PrefixStrGT applies the GT predicate on the "prefix_str" field.
func PrefixStrGT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrGTE applies the GTE predicate on the "prefix_str" field.
func PrefixStrGTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrLT applies the LT predicate on the "prefix_str" field.
func PrefixStrLT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrLTE applies the LTE predicate on the "prefix_str" field.
func PrefixStrLTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrContains applies the Contains predicate on the "prefix_str" field.
func PrefixStrContains(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrHasPrefix applies the HasPrefix predicate on the "prefix_str" field.
func PrefixStrHasPrefix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrHasSuffix applies the HasSuffix predicate on the "prefix_str" field.
func PrefixStrHasSuffix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrEqualFold applies the EqualFold predicate on the "prefix_str" field.
func PrefixStrEqualFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrefixStr), v))
	})
}

// PrefixStrContainsFold applies the ContainsFold predicate on the "prefix_str" field.
func PrefixStrContainsFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrefixStr), v))
	})
}

// SuffixStrEQ applies the EQ predicate on the "suffix_str" field.
func SuffixStrEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrNEQ applies the NEQ predicate on the "suffix_str" field.
func SuffixStrNEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrIn applies the In predicate on the "suffix_str" field.
func SuffixStrIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSuffixStr), v...))
	})
}

// SuffixStrNotIn applies the NotIn predicate on the "suffix_str" field.
func SuffixStrNotIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSuffixStr), v...))
	})
}

// SuffixStrGT applies the GT predicate on the "suffix_str" field.
func SuffixStrGT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrGTE applies the GTE predicate on the "suffix_str" field.
func SuffixStrGTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrLT applies the LT predicate on the "suffix_str" field.
func SuffixStrLT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrLTE applies the LTE predicate on the "suffix_str" field.
func SuffixStrLTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrContains applies the Contains predicate on the "suffix_str" field.
func SuffixStrContains(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrHasPrefix applies the HasPrefix predicate on the "suffix_str" field.
func SuffixStrHasPrefix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrHasSuffix applies the HasSuffix predicate on the "suffix_str" field.
func SuffixStrHasSuffix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrEqualFold applies the EqualFold predicate on the "suffix_str" field.
func SuffixStrEqualFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuffixStr), v))
	})
}

// SuffixStrContainsFold applies the ContainsFold predicate on the "suffix_str" field.
func SuffixStrContainsFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuffixStr), v))
	})
}

// SeparatorEQ applies the EQ predicate on the "separator" field.
func SeparatorEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparator), v))
	})
}

// SeparatorNEQ applies the NEQ predicate on the "separator" field.
func SeparatorNEQ(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeparator), v))
	})
}

// SeparatorIn applies the In predicate on the "separator" field.
func SeparatorIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSeparator), v...))
	})
}

// SeparatorNotIn applies the NotIn predicate on the "separator" field.
func SeparatorNotIn(vs ...string) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSeparator), v...))
	})
}

// SeparatorGT applies the GT predicate on the "separator" field.
func SeparatorGT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeparator), v))
	})
}

// SeparatorGTE applies the GTE predicate on the "separator" field.
func SeparatorGTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeparator), v))
	})
}

// SeparatorLT applies the LT predicate on the "separator" field.
func SeparatorLT(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeparator), v))
	})
}

// SeparatorLTE applies the LTE predicate on the "separator" field.
func SeparatorLTE(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeparator), v))
	})
}

// SeparatorContains applies the Contains predicate on the "separator" field.
func SeparatorContains(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSeparator), v))
	})
}

// SeparatorHasPrefix applies the HasPrefix predicate on the "separator" field.
func SeparatorHasPrefix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSeparator), v))
	})
}

// SeparatorHasSuffix applies the HasSuffix predicate on the "separator" field.
func SeparatorHasSuffix(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSeparator), v))
	})
}

// SeparatorEqualFold applies the EqualFold predicate on the "separator" field.
func SeparatorEqualFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSeparator), v))
	})
}

// SeparatorContainsFold applies the ContainsFold predicate on the "separator" field.
func SeparatorContainsFold(v string) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSeparator), v))
	})
}

// PrefillWithZeroEQ applies the EQ predicate on the "prefill_with_zero" field.
func PrefillWithZeroEQ(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefillWithZero), v))
	})
}

// PrefillWithZeroNEQ applies the NEQ predicate on the "prefill_with_zero" field.
func PrefillWithZeroNEQ(v bool) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrefillWithZero), v))
	})
}

// PrefillWidthEQ applies the EQ predicate on the "prefill_width" field.
func PrefillWidthEQ(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefillWidth), v))
	})
}

// PrefillWidthNEQ applies the NEQ predicate on the "prefill_width" field.
func PrefillWidthNEQ(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrefillWidth), v))
	})
}

// PrefillWidthIn applies the In predicate on the "prefill_width" field.
func PrefillWidthIn(vs ...int) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrefillWidth), v...))
	})
}

// PrefillWidthNotIn applies the NotIn predicate on the "prefill_width" field.
func PrefillWidthNotIn(vs ...int) predicate.AdmNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrefillWidth), v...))
	})
}

// PrefillWidthGT applies the GT predicate on the "prefill_width" field.
func PrefillWidthGT(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrefillWidth), v))
	})
}

// PrefillWidthGTE applies the GTE predicate on the "prefill_width" field.
func PrefillWidthGTE(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrefillWidth), v))
	})
}

// PrefillWidthLT applies the LT predicate on the "prefill_width" field.
func PrefillWidthLT(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrefillWidth), v))
	})
}

// PrefillWidthLTE applies the LTE predicate on the "prefill_width" field.
func PrefillWidthLTE(v int) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrefillWidth), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdmNumber) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdmNumber) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdmNumber) predicate.AdmNumber {
	return predicate.AdmNumber(func(s *sql.Selector) {
		p(s.Not())
	})
}
