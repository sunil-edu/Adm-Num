// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/admnumber"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AdmNumber is the model entity for the AdmNumber schema.
type AdmNumber struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AdmStartNo holds the value of the "adm_start_no" field.
	AdmStartNo string `json:"adm_start_no,omitempty"`
	// AdmCurrentNo holds the value of the "adm_current_no" field.
	AdmCurrentNo string `json:"adm_current_no,omitempty"`
	// IsPrefixed holds the value of the "is_prefixed" field.
	IsPrefixed bool `json:"is_prefixed,omitempty"`
	// PrefixStr holds the value of the "prefix_str" field.
	PrefixStr string `json:"prefix_str,omitempty"`
	// SuffixStr holds the value of the "suffix_str" field.
	SuffixStr string `json:"suffix_str,omitempty"`
	// Separator holds the value of the "separator" field.
	Separator string `json:"separator,omitempty"`
	// PrefillWithZero holds the value of the "prefill_with_zero" field.
	PrefillWithZero bool `json:"prefill_with_zero,omitempty"`
	// PrefillWidth holds the value of the "prefill_width" field.
	PrefillWidth int `json:"prefill_width,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdmNumber) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case admnumber.FieldIsPrefixed, admnumber.FieldPrefillWithZero:
			values[i] = new(sql.NullBool)
		case admnumber.FieldID, admnumber.FieldPrefillWidth:
			values[i] = new(sql.NullInt64)
		case admnumber.FieldAdmStartNo, admnumber.FieldAdmCurrentNo, admnumber.FieldPrefixStr, admnumber.FieldSuffixStr, admnumber.FieldSeparator:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdmNumber", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdmNumber fields.
func (an *AdmNumber) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admnumber.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			an.ID = int(value.Int64)
		case admnumber.FieldAdmStartNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field adm_start_no", values[i])
			} else if value.Valid {
				an.AdmStartNo = value.String
			}
		case admnumber.FieldAdmCurrentNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field adm_current_no", values[i])
			} else if value.Valid {
				an.AdmCurrentNo = value.String
			}
		case admnumber.FieldIsPrefixed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_prefixed", values[i])
			} else if value.Valid {
				an.IsPrefixed = value.Bool
			}
		case admnumber.FieldPrefixStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix_str", values[i])
			} else if value.Valid {
				an.PrefixStr = value.String
			}
		case admnumber.FieldSuffixStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix_str", values[i])
			} else if value.Valid {
				an.SuffixStr = value.String
			}
		case admnumber.FieldSeparator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field separator", values[i])
			} else if value.Valid {
				an.Separator = value.String
			}
		case admnumber.FieldPrefillWithZero:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prefill_with_zero", values[i])
			} else if value.Valid {
				an.PrefillWithZero = value.Bool
			}
		case admnumber.FieldPrefillWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prefill_width", values[i])
			} else if value.Valid {
				an.PrefillWidth = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AdmNumber.
// Note that you need to call AdmNumber.Unwrap() before calling this method if this AdmNumber
// was returned from a transaction, and the transaction was committed or rolled back.
func (an *AdmNumber) Update() *AdmNumberUpdateOne {
	return (&AdmNumberClient{config: an.config}).UpdateOne(an)
}

// Unwrap unwraps the AdmNumber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (an *AdmNumber) Unwrap() *AdmNumber {
	_tx, ok := an.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdmNumber is not a transactional entity")
	}
	an.config.driver = _tx.drv
	return an
}

// String implements the fmt.Stringer.
func (an *AdmNumber) String() string {
	var builder strings.Builder
	builder.WriteString("AdmNumber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", an.ID))
	builder.WriteString("adm_start_no=")
	builder.WriteString(an.AdmStartNo)
	builder.WriteString(", ")
	builder.WriteString("adm_current_no=")
	builder.WriteString(an.AdmCurrentNo)
	builder.WriteString(", ")
	builder.WriteString("is_prefixed=")
	builder.WriteString(fmt.Sprintf("%v", an.IsPrefixed))
	builder.WriteString(", ")
	builder.WriteString("prefix_str=")
	builder.WriteString(an.PrefixStr)
	builder.WriteString(", ")
	builder.WriteString("suffix_str=")
	builder.WriteString(an.SuffixStr)
	builder.WriteString(", ")
	builder.WriteString("separator=")
	builder.WriteString(an.Separator)
	builder.WriteString(", ")
	builder.WriteString("prefill_with_zero=")
	builder.WriteString(fmt.Sprintf("%v", an.PrefillWithZero))
	builder.WriteString(", ")
	builder.WriteString("prefill_width=")
	builder.WriteString(fmt.Sprintf("%v", an.PrefillWidth))
	builder.WriteByte(')')
	return builder.String()
}

// AdmNumbers is a parsable slice of AdmNumber.
type AdmNumbers []*AdmNumber

func (an AdmNumbers) config(cfg config) {
	for _i := range an {
		an[_i].config = cfg
	}
}
