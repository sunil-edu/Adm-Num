// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/mststudent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MstStudentCreate is the builder for creating a MstStudent entity.
type MstStudentCreate struct {
	config
	mutation *MstStudentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirstName sets the "first_name" field.
func (msc *MstStudentCreate) SetFirstName(s string) *MstStudentCreate {
	msc.mutation.SetFirstName(s)
	return msc
}

// SetMiddleName sets the "middle_name" field.
func (msc *MstStudentCreate) SetMiddleName(s string) *MstStudentCreate {
	msc.mutation.SetMiddleName(s)
	return msc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableMiddleName(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetMiddleName(*s)
	}
	return msc
}

// SetLastName sets the "last_name" field.
func (msc *MstStudentCreate) SetLastName(s string) *MstStudentCreate {
	msc.mutation.SetLastName(s)
	return msc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableLastName(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetLastName(*s)
	}
	return msc
}

// SetStdStudying sets the "std_studying" field.
func (msc *MstStudentCreate) SetStdStudying(b bool) *MstStudentCreate {
	msc.mutation.SetStdStudying(b)
	return msc
}

// SetNillableStdStudying sets the "std_studying" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdStudying(b *bool) *MstStudentCreate {
	if b != nil {
		msc.SetStdStudying(*b)
	}
	return msc
}

// SetStdStatus sets the "std_status" field.
func (msc *MstStudentCreate) SetStdStatus(s string) *MstStudentCreate {
	msc.mutation.SetStdStatus(s)
	return msc
}

// SetNillableStdStatus sets the "std_status" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdStatus(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdStatus(*s)
	}
	return msc
}

// SetStdSex sets the "std_sex" field.
func (msc *MstStudentCreate) SetStdSex(s string) *MstStudentCreate {
	msc.mutation.SetStdSex(s)
	return msc
}

// SetNillableStdSex sets the "std_sex" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdSex(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdSex(*s)
	}
	return msc
}

// SetStdRegNo sets the "std_reg_no" field.
func (msc *MstStudentCreate) SetStdRegNo(s string) *MstStudentCreate {
	msc.mutation.SetStdRegNo(s)
	return msc
}

// SetNillableStdRegNo sets the "std_reg_no" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdRegNo(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdRegNo(*s)
	}
	return msc
}

// SetStdAdmNo sets the "std_adm_no" field.
func (msc *MstStudentCreate) SetStdAdmNo(s string) *MstStudentCreate {
	msc.mutation.SetStdAdmNo(s)
	return msc
}

// SetNillableStdAdmNo sets the "std_adm_no" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdAdmNo(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdAdmNo(*s)
	}
	return msc
}

// SetStdDoa sets the "std_doa" field.
func (msc *MstStudentCreate) SetStdDoa(t time.Time) *MstStudentCreate {
	msc.mutation.SetStdDoa(t)
	return msc
}

// SetNillableStdDoa sets the "std_doa" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdDoa(t *time.Time) *MstStudentCreate {
	if t != nil {
		msc.SetStdDoa(*t)
	}
	return msc
}

// SetStdFresher sets the "std_fresher" field.
func (msc *MstStudentCreate) SetStdFresher(b bool) *MstStudentCreate {
	msc.mutation.SetStdFresher(b)
	return msc
}

// SetNillableStdFresher sets the "std_fresher" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdFresher(b *bool) *MstStudentCreate {
	if b != nil {
		msc.SetStdFresher(*b)
	}
	return msc
}

// SetStdDob sets the "std_dob" field.
func (msc *MstStudentCreate) SetStdDob(t time.Time) *MstStudentCreate {
	msc.mutation.SetStdDob(t)
	return msc
}

// SetNillableStdDob sets the "std_dob" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdDob(t *time.Time) *MstStudentCreate {
	if t != nil {
		msc.SetStdDob(*t)
	}
	return msc
}

// SetStdEmail sets the "std_email" field.
func (msc *MstStudentCreate) SetStdEmail(s string) *MstStudentCreate {
	msc.mutation.SetStdEmail(s)
	return msc
}

// SetStdMobile sets the "std_mobile" field.
func (msc *MstStudentCreate) SetStdMobile(s string) *MstStudentCreate {
	msc.mutation.SetStdMobile(s)
	return msc
}

// SetStdFatherName sets the "std_father_name" field.
func (msc *MstStudentCreate) SetStdFatherName(s string) *MstStudentCreate {
	msc.mutation.SetStdFatherName(s)
	return msc
}

// SetNillableStdFatherName sets the "std_father_name" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdFatherName(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdFatherName(*s)
	}
	return msc
}

// SetStdMotherName sets the "std_mother_name" field.
func (msc *MstStudentCreate) SetStdMotherName(s string) *MstStudentCreate {
	msc.mutation.SetStdMotherName(s)
	return msc
}

// SetNillableStdMotherName sets the "std_mother_name" field if the given value is not nil.
func (msc *MstStudentCreate) SetNillableStdMotherName(s *string) *MstStudentCreate {
	if s != nil {
		msc.SetStdMotherName(*s)
	}
	return msc
}

// Mutation returns the MstStudentMutation object of the builder.
func (msc *MstStudentCreate) Mutation() *MstStudentMutation {
	return msc.mutation
}

// Save creates the MstStudent in the database.
func (msc *MstStudentCreate) Save(ctx context.Context) (*MstStudent, error) {
	var (
		err  error
		node *MstStudent
	)
	if err := msc.defaults(); err != nil {
		return nil, err
	}
	if len(msc.hooks) == 0 {
		if err = msc.check(); err != nil {
			return nil, err
		}
		node, err = msc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MstStudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msc.check(); err != nil {
				return nil, err
			}
			msc.mutation = mutation
			if node, err = msc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(msc.hooks) - 1; i >= 0; i-- {
			if msc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, msc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MstStudent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MstStudentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MstStudentCreate) SaveX(ctx context.Context) *MstStudent {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MstStudentCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MstStudentCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MstStudentCreate) defaults() error {
	if _, ok := msc.mutation.MiddleName(); !ok {
		v := mststudent.DefaultMiddleName
		msc.mutation.SetMiddleName(v)
	}
	if _, ok := msc.mutation.LastName(); !ok {
		v := mststudent.DefaultLastName
		msc.mutation.SetLastName(v)
	}
	if _, ok := msc.mutation.StdStudying(); !ok {
		v := mststudent.DefaultStdStudying
		msc.mutation.SetStdStudying(v)
	}
	if _, ok := msc.mutation.StdStatus(); !ok {
		v := mststudent.DefaultStdStatus
		msc.mutation.SetStdStatus(v)
	}
	if _, ok := msc.mutation.StdSex(); !ok {
		v := mststudent.DefaultStdSex
		msc.mutation.SetStdSex(v)
	}
	if _, ok := msc.mutation.StdRegNo(); !ok {
		v := mststudent.DefaultStdRegNo
		msc.mutation.SetStdRegNo(v)
	}
	if _, ok := msc.mutation.StdAdmNo(); !ok {
		v := mststudent.DefaultStdAdmNo
		msc.mutation.SetStdAdmNo(v)
	}
	if _, ok := msc.mutation.StdDoa(); !ok {
		if mststudent.DefaultStdDoa == nil {
			return fmt.Errorf("ent: uninitialized mststudent.DefaultStdDoa (forgotten import ent/runtime?)")
		}
		v := mststudent.DefaultStdDoa()
		msc.mutation.SetStdDoa(v)
	}
	if _, ok := msc.mutation.StdFresher(); !ok {
		v := mststudent.DefaultStdFresher
		msc.mutation.SetStdFresher(v)
	}
	if _, ok := msc.mutation.StdDob(); !ok {
		if mststudent.DefaultStdDob == nil {
			return fmt.Errorf("ent: uninitialized mststudent.DefaultStdDob (forgotten import ent/runtime?)")
		}
		v := mststudent.DefaultStdDob()
		msc.mutation.SetStdDob(v)
	}
	if _, ok := msc.mutation.StdFatherName(); !ok {
		v := mststudent.DefaultStdFatherName
		msc.mutation.SetStdFatherName(v)
	}
	if _, ok := msc.mutation.StdMotherName(); !ok {
		v := mststudent.DefaultStdMotherName
		msc.mutation.SetStdMotherName(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (msc *MstStudentCreate) check() error {
	if _, ok := msc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "MstStudent.first_name"`)}
	}
	if v, ok := msc.mutation.FirstName(); ok {
		if err := mststudent.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "MstStudent.first_name": %w`, err)}
		}
	}
	if _, ok := msc.mutation.MiddleName(); !ok {
		return &ValidationError{Name: "middle_name", err: errors.New(`ent: missing required field "MstStudent.middle_name"`)}
	}
	if _, ok := msc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "MstStudent.last_name"`)}
	}
	if _, ok := msc.mutation.StdStudying(); !ok {
		return &ValidationError{Name: "std_studying", err: errors.New(`ent: missing required field "MstStudent.std_studying"`)}
	}
	if _, ok := msc.mutation.StdStatus(); !ok {
		return &ValidationError{Name: "std_status", err: errors.New(`ent: missing required field "MstStudent.std_status"`)}
	}
	if _, ok := msc.mutation.StdSex(); !ok {
		return &ValidationError{Name: "std_sex", err: errors.New(`ent: missing required field "MstStudent.std_sex"`)}
	}
	if _, ok := msc.mutation.StdRegNo(); !ok {
		return &ValidationError{Name: "std_reg_no", err: errors.New(`ent: missing required field "MstStudent.std_reg_no"`)}
	}
	if _, ok := msc.mutation.StdAdmNo(); !ok {
		return &ValidationError{Name: "std_adm_no", err: errors.New(`ent: missing required field "MstStudent.std_adm_no"`)}
	}
	if _, ok := msc.mutation.StdFresher(); !ok {
		return &ValidationError{Name: "std_fresher", err: errors.New(`ent: missing required field "MstStudent.std_fresher"`)}
	}
	if _, ok := msc.mutation.StdEmail(); !ok {
		return &ValidationError{Name: "std_email", err: errors.New(`ent: missing required field "MstStudent.std_email"`)}
	}
	if v, ok := msc.mutation.StdEmail(); ok {
		if err := mststudent.StdEmailValidator(v); err != nil {
			return &ValidationError{Name: "std_email", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_email": %w`, err)}
		}
	}
	if _, ok := msc.mutation.StdMobile(); !ok {
		return &ValidationError{Name: "std_mobile", err: errors.New(`ent: missing required field "MstStudent.std_mobile"`)}
	}
	if v, ok := msc.mutation.StdMobile(); ok {
		if err := mststudent.StdMobileValidator(v); err != nil {
			return &ValidationError{Name: "std_mobile", err: fmt.Errorf(`ent: validator failed for field "MstStudent.std_mobile": %w`, err)}
		}
	}
	if _, ok := msc.mutation.StdFatherName(); !ok {
		return &ValidationError{Name: "std_father_name", err: errors.New(`ent: missing required field "MstStudent.std_father_name"`)}
	}
	if _, ok := msc.mutation.StdMotherName(); !ok {
		return &ValidationError{Name: "std_mother_name", err: errors.New(`ent: missing required field "MstStudent.std_mother_name"`)}
	}
	return nil
}

func (msc *MstStudentCreate) sqlSave(ctx context.Context) (*MstStudent, error) {
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (msc *MstStudentCreate) createSpec() (*MstStudent, *sqlgraph.CreateSpec) {
	var (
		_node = &MstStudent{config: msc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mststudent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mststudent.FieldID,
			},
		}
	)
	_spec.OnConflict = msc.conflict
	if value, ok := msc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := msc.mutation.MiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldMiddleName,
		})
		_node.MiddleName = value
	}
	if value, ok := msc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := msc.mutation.StdStudying(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdStudying,
		})
		_node.StdStudying = value
	}
	if value, ok := msc.mutation.StdStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdStatus,
		})
		_node.StdStatus = value
	}
	if value, ok := msc.mutation.StdSex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdSex,
		})
		_node.StdSex = value
	}
	if value, ok := msc.mutation.StdRegNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdRegNo,
		})
		_node.StdRegNo = value
	}
	if value, ok := msc.mutation.StdAdmNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdAdmNo,
		})
		_node.StdAdmNo = value
	}
	if value, ok := msc.mutation.StdDoa(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDoa,
		})
		_node.StdDoa = &value
	}
	if value, ok := msc.mutation.StdFresher(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mststudent.FieldStdFresher,
		})
		_node.StdFresher = value
	}
	if value, ok := msc.mutation.StdDob(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mststudent.FieldStdDob,
		})
		_node.StdDob = &value
	}
	if value, ok := msc.mutation.StdEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdEmail,
		})
		_node.StdEmail = value
	}
	if value, ok := msc.mutation.StdMobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMobile,
		})
		_node.StdMobile = value
	}
	if value, ok := msc.mutation.StdFatherName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdFatherName,
		})
		_node.StdFatherName = value
	}
	if value, ok := msc.mutation.StdMotherName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mststudent.FieldStdMotherName,
		})
		_node.StdMotherName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MstStudent.Create().
//		SetFirstName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MstStudentUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
func (msc *MstStudentCreate) OnConflict(opts ...sql.ConflictOption) *MstStudentUpsertOne {
	msc.conflict = opts
	return &MstStudentUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *MstStudentCreate) OnConflictColumns(columns ...string) *MstStudentUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &MstStudentUpsertOne{
		create: msc,
	}
}

type (
	// MstStudentUpsertOne is the builder for "upsert"-ing
	//  one MstStudent node.
	MstStudentUpsertOne struct {
		create *MstStudentCreate
	}

	// MstStudentUpsert is the "OnConflict" setter.
	MstStudentUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirstName sets the "first_name" field.
func (u *MstStudentUpsert) SetFirstName(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateFirstName() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldFirstName)
	return u
}

// SetMiddleName sets the "middle_name" field.
func (u *MstStudentUpsert) SetMiddleName(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldMiddleName, v)
	return u
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateMiddleName() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldMiddleName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *MstStudentUpsert) SetLastName(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateLastName() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldLastName)
	return u
}

// SetStdStudying sets the "std_studying" field.
func (u *MstStudentUpsert) SetStdStudying(v bool) *MstStudentUpsert {
	u.Set(mststudent.FieldStdStudying, v)
	return u
}

// UpdateStdStudying sets the "std_studying" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdStudying() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdStudying)
	return u
}

// SetStdStatus sets the "std_status" field.
func (u *MstStudentUpsert) SetStdStatus(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdStatus, v)
	return u
}

// UpdateStdStatus sets the "std_status" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdStatus() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdStatus)
	return u
}

// SetStdSex sets the "std_sex" field.
func (u *MstStudentUpsert) SetStdSex(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdSex, v)
	return u
}

// UpdateStdSex sets the "std_sex" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdSex() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdSex)
	return u
}

// SetStdRegNo sets the "std_reg_no" field.
func (u *MstStudentUpsert) SetStdRegNo(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdRegNo, v)
	return u
}

// UpdateStdRegNo sets the "std_reg_no" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdRegNo() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdRegNo)
	return u
}

// SetStdAdmNo sets the "std_adm_no" field.
func (u *MstStudentUpsert) SetStdAdmNo(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdAdmNo, v)
	return u
}

// UpdateStdAdmNo sets the "std_adm_no" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdAdmNo() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdAdmNo)
	return u
}

// SetStdDoa sets the "std_doa" field.
func (u *MstStudentUpsert) SetStdDoa(v time.Time) *MstStudentUpsert {
	u.Set(mststudent.FieldStdDoa, v)
	return u
}

// UpdateStdDoa sets the "std_doa" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdDoa() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdDoa)
	return u
}

// ClearStdDoa clears the value of the "std_doa" field.
func (u *MstStudentUpsert) ClearStdDoa() *MstStudentUpsert {
	u.SetNull(mststudent.FieldStdDoa)
	return u
}

// SetStdFresher sets the "std_fresher" field.
func (u *MstStudentUpsert) SetStdFresher(v bool) *MstStudentUpsert {
	u.Set(mststudent.FieldStdFresher, v)
	return u
}

// UpdateStdFresher sets the "std_fresher" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdFresher() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdFresher)
	return u
}

// SetStdDob sets the "std_dob" field.
func (u *MstStudentUpsert) SetStdDob(v time.Time) *MstStudentUpsert {
	u.Set(mststudent.FieldStdDob, v)
	return u
}

// UpdateStdDob sets the "std_dob" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdDob() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdDob)
	return u
}

// ClearStdDob clears the value of the "std_dob" field.
func (u *MstStudentUpsert) ClearStdDob() *MstStudentUpsert {
	u.SetNull(mststudent.FieldStdDob)
	return u
}

// SetStdEmail sets the "std_email" field.
func (u *MstStudentUpsert) SetStdEmail(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdEmail, v)
	return u
}

// UpdateStdEmail sets the "std_email" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdEmail() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdEmail)
	return u
}

// SetStdMobile sets the "std_mobile" field.
func (u *MstStudentUpsert) SetStdMobile(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdMobile, v)
	return u
}

// UpdateStdMobile sets the "std_mobile" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdMobile() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdMobile)
	return u
}

// SetStdFatherName sets the "std_father_name" field.
func (u *MstStudentUpsert) SetStdFatherName(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdFatherName, v)
	return u
}

// UpdateStdFatherName sets the "std_father_name" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdFatherName() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdFatherName)
	return u
}

// SetStdMotherName sets the "std_mother_name" field.
func (u *MstStudentUpsert) SetStdMotherName(v string) *MstStudentUpsert {
	u.Set(mststudent.FieldStdMotherName, v)
	return u
}

// UpdateStdMotherName sets the "std_mother_name" field to the value that was provided on create.
func (u *MstStudentUpsert) UpdateStdMotherName() *MstStudentUpsert {
	u.SetExcluded(mststudent.FieldStdMotherName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MstStudentUpsertOne) UpdateNewValues() *MstStudentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MstStudentUpsertOne) Ignore() *MstStudentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MstStudentUpsertOne) DoNothing() *MstStudentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MstStudentCreate.OnConflict
// documentation for more info.
func (u *MstStudentUpsertOne) Update(set func(*MstStudentUpsert)) *MstStudentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MstStudentUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *MstStudentUpsertOne) SetFirstName(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateFirstName() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateFirstName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *MstStudentUpsertOne) SetMiddleName(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateMiddleName() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateMiddleName()
	})
}

// SetLastName sets the "last_name" field.
func (u *MstStudentUpsertOne) SetLastName(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateLastName() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateLastName()
	})
}

// SetStdStudying sets the "std_studying" field.
func (u *MstStudentUpsertOne) SetStdStudying(v bool) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdStudying(v)
	})
}

// UpdateStdStudying sets the "std_studying" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdStudying() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdStudying()
	})
}

// SetStdStatus sets the "std_status" field.
func (u *MstStudentUpsertOne) SetStdStatus(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdStatus(v)
	})
}

// UpdateStdStatus sets the "std_status" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdStatus() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdStatus()
	})
}

// SetStdSex sets the "std_sex" field.
func (u *MstStudentUpsertOne) SetStdSex(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdSex(v)
	})
}

// UpdateStdSex sets the "std_sex" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdSex() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdSex()
	})
}

// SetStdRegNo sets the "std_reg_no" field.
func (u *MstStudentUpsertOne) SetStdRegNo(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdRegNo(v)
	})
}

// UpdateStdRegNo sets the "std_reg_no" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdRegNo() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdRegNo()
	})
}

// SetStdAdmNo sets the "std_adm_no" field.
func (u *MstStudentUpsertOne) SetStdAdmNo(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdAdmNo(v)
	})
}

// UpdateStdAdmNo sets the "std_adm_no" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdAdmNo() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdAdmNo()
	})
}

// SetStdDoa sets the "std_doa" field.
func (u *MstStudentUpsertOne) SetStdDoa(v time.Time) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdDoa(v)
	})
}

// UpdateStdDoa sets the "std_doa" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdDoa() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdDoa()
	})
}

// ClearStdDoa clears the value of the "std_doa" field.
func (u *MstStudentUpsertOne) ClearStdDoa() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.ClearStdDoa()
	})
}

// SetStdFresher sets the "std_fresher" field.
func (u *MstStudentUpsertOne) SetStdFresher(v bool) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdFresher(v)
	})
}

// UpdateStdFresher sets the "std_fresher" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdFresher() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdFresher()
	})
}

// SetStdDob sets the "std_dob" field.
func (u *MstStudentUpsertOne) SetStdDob(v time.Time) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdDob(v)
	})
}

// UpdateStdDob sets the "std_dob" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdDob() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdDob()
	})
}

// ClearStdDob clears the value of the "std_dob" field.
func (u *MstStudentUpsertOne) ClearStdDob() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.ClearStdDob()
	})
}

// SetStdEmail sets the "std_email" field.
func (u *MstStudentUpsertOne) SetStdEmail(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdEmail(v)
	})
}

// UpdateStdEmail sets the "std_email" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdEmail() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdEmail()
	})
}

// SetStdMobile sets the "std_mobile" field.
func (u *MstStudentUpsertOne) SetStdMobile(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdMobile(v)
	})
}

// UpdateStdMobile sets the "std_mobile" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdMobile() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdMobile()
	})
}

// SetStdFatherName sets the "std_father_name" field.
func (u *MstStudentUpsertOne) SetStdFatherName(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdFatherName(v)
	})
}

// UpdateStdFatherName sets the "std_father_name" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdFatherName() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdFatherName()
	})
}

// SetStdMotherName sets the "std_mother_name" field.
func (u *MstStudentUpsertOne) SetStdMotherName(v string) *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdMotherName(v)
	})
}

// UpdateStdMotherName sets the "std_mother_name" field to the value that was provided on create.
func (u *MstStudentUpsertOne) UpdateStdMotherName() *MstStudentUpsertOne {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdMotherName()
	})
}

// Exec executes the query.
func (u *MstStudentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MstStudentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MstStudentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MstStudentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MstStudentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MstStudentCreateBulk is the builder for creating many MstStudent entities in bulk.
type MstStudentCreateBulk struct {
	config
	builders []*MstStudentCreate
	conflict []sql.ConflictOption
}

// Save creates the MstStudent entities in the database.
func (mscb *MstStudentCreateBulk) Save(ctx context.Context) ([]*MstStudent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MstStudent, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MstStudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MstStudentCreateBulk) SaveX(ctx context.Context) []*MstStudent {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MstStudentCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MstStudentCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MstStudent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MstStudentUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
func (mscb *MstStudentCreateBulk) OnConflict(opts ...sql.ConflictOption) *MstStudentUpsertBulk {
	mscb.conflict = opts
	return &MstStudentUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *MstStudentCreateBulk) OnConflictColumns(columns ...string) *MstStudentUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &MstStudentUpsertBulk{
		create: mscb,
	}
}

// MstStudentUpsertBulk is the builder for "upsert"-ing
// a bulk of MstStudent nodes.
type MstStudentUpsertBulk struct {
	create *MstStudentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MstStudentUpsertBulk) UpdateNewValues() *MstStudentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MstStudent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MstStudentUpsertBulk) Ignore() *MstStudentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MstStudentUpsertBulk) DoNothing() *MstStudentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MstStudentCreateBulk.OnConflict
// documentation for more info.
func (u *MstStudentUpsertBulk) Update(set func(*MstStudentUpsert)) *MstStudentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MstStudentUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *MstStudentUpsertBulk) SetFirstName(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateFirstName() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateFirstName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *MstStudentUpsertBulk) SetMiddleName(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateMiddleName() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateMiddleName()
	})
}

// SetLastName sets the "last_name" field.
func (u *MstStudentUpsertBulk) SetLastName(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateLastName() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateLastName()
	})
}

// SetStdStudying sets the "std_studying" field.
func (u *MstStudentUpsertBulk) SetStdStudying(v bool) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdStudying(v)
	})
}

// UpdateStdStudying sets the "std_studying" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdStudying() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdStudying()
	})
}

// SetStdStatus sets the "std_status" field.
func (u *MstStudentUpsertBulk) SetStdStatus(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdStatus(v)
	})
}

// UpdateStdStatus sets the "std_status" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdStatus() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdStatus()
	})
}

// SetStdSex sets the "std_sex" field.
func (u *MstStudentUpsertBulk) SetStdSex(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdSex(v)
	})
}

// UpdateStdSex sets the "std_sex" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdSex() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdSex()
	})
}

// SetStdRegNo sets the "std_reg_no" field.
func (u *MstStudentUpsertBulk) SetStdRegNo(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdRegNo(v)
	})
}

// UpdateStdRegNo sets the "std_reg_no" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdRegNo() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdRegNo()
	})
}

// SetStdAdmNo sets the "std_adm_no" field.
func (u *MstStudentUpsertBulk) SetStdAdmNo(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdAdmNo(v)
	})
}

// UpdateStdAdmNo sets the "std_adm_no" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdAdmNo() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdAdmNo()
	})
}

// SetStdDoa sets the "std_doa" field.
func (u *MstStudentUpsertBulk) SetStdDoa(v time.Time) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdDoa(v)
	})
}

// UpdateStdDoa sets the "std_doa" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdDoa() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdDoa()
	})
}

// ClearStdDoa clears the value of the "std_doa" field.
func (u *MstStudentUpsertBulk) ClearStdDoa() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.ClearStdDoa()
	})
}

// SetStdFresher sets the "std_fresher" field.
func (u *MstStudentUpsertBulk) SetStdFresher(v bool) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdFresher(v)
	})
}

// UpdateStdFresher sets the "std_fresher" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdFresher() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdFresher()
	})
}

// SetStdDob sets the "std_dob" field.
func (u *MstStudentUpsertBulk) SetStdDob(v time.Time) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdDob(v)
	})
}

// UpdateStdDob sets the "std_dob" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdDob() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdDob()
	})
}

// ClearStdDob clears the value of the "std_dob" field.
func (u *MstStudentUpsertBulk) ClearStdDob() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.ClearStdDob()
	})
}

// SetStdEmail sets the "std_email" field.
func (u *MstStudentUpsertBulk) SetStdEmail(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdEmail(v)
	})
}

// UpdateStdEmail sets the "std_email" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdEmail() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdEmail()
	})
}

// SetStdMobile sets the "std_mobile" field.
func (u *MstStudentUpsertBulk) SetStdMobile(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdMobile(v)
	})
}

// UpdateStdMobile sets the "std_mobile" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdMobile() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdMobile()
	})
}

// SetStdFatherName sets the "std_father_name" field.
func (u *MstStudentUpsertBulk) SetStdFatherName(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdFatherName(v)
	})
}

// UpdateStdFatherName sets the "std_father_name" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdFatherName() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdFatherName()
	})
}

// SetStdMotherName sets the "std_mother_name" field.
func (u *MstStudentUpsertBulk) SetStdMotherName(v string) *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.SetStdMotherName(v)
	})
}

// UpdateStdMotherName sets the "std_mother_name" field to the value that was provided on create.
func (u *MstStudentUpsertBulk) UpdateStdMotherName() *MstStudentUpsertBulk {
	return u.Update(func(s *MstStudentUpsert) {
		s.UpdateStdMotherName()
	})
}

// Exec executes the query.
func (u *MstStudentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MstStudentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MstStudentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MstStudentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
