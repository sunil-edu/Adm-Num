// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/admnumber"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdmNumberCreate is the builder for creating a AdmNumber entity.
type AdmNumberCreate struct {
	config
	mutation *AdmNumberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAdmStartNo sets the "adm_start_no" field.
func (anc *AdmNumberCreate) SetAdmStartNo(s string) *AdmNumberCreate {
	anc.mutation.SetAdmStartNo(s)
	return anc
}

// SetNillableAdmStartNo sets the "adm_start_no" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillableAdmStartNo(s *string) *AdmNumberCreate {
	if s != nil {
		anc.SetAdmStartNo(*s)
	}
	return anc
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (anc *AdmNumberCreate) SetAdmCurrentNo(s string) *AdmNumberCreate {
	anc.mutation.SetAdmCurrentNo(s)
	return anc
}

// SetNillableAdmCurrentNo sets the "adm_current_no" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillableAdmCurrentNo(s *string) *AdmNumberCreate {
	if s != nil {
		anc.SetAdmCurrentNo(*s)
	}
	return anc
}

// SetIsPrefixed sets the "is_prefixed" field.
func (anc *AdmNumberCreate) SetIsPrefixed(b bool) *AdmNumberCreate {
	anc.mutation.SetIsPrefixed(b)
	return anc
}

// SetNillableIsPrefixed sets the "is_prefixed" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillableIsPrefixed(b *bool) *AdmNumberCreate {
	if b != nil {
		anc.SetIsPrefixed(*b)
	}
	return anc
}

// SetPrefixStr sets the "prefix_str" field.
func (anc *AdmNumberCreate) SetPrefixStr(s string) *AdmNumberCreate {
	anc.mutation.SetPrefixStr(s)
	return anc
}

// SetNillablePrefixStr sets the "prefix_str" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillablePrefixStr(s *string) *AdmNumberCreate {
	if s != nil {
		anc.SetPrefixStr(*s)
	}
	return anc
}

// SetSuffixStr sets the "suffix_str" field.
func (anc *AdmNumberCreate) SetSuffixStr(s string) *AdmNumberCreate {
	anc.mutation.SetSuffixStr(s)
	return anc
}

// SetNillableSuffixStr sets the "suffix_str" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillableSuffixStr(s *string) *AdmNumberCreate {
	if s != nil {
		anc.SetSuffixStr(*s)
	}
	return anc
}

// SetSeparator sets the "separator" field.
func (anc *AdmNumberCreate) SetSeparator(s string) *AdmNumberCreate {
	anc.mutation.SetSeparator(s)
	return anc
}

// SetNillableSeparator sets the "separator" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillableSeparator(s *string) *AdmNumberCreate {
	if s != nil {
		anc.SetSeparator(*s)
	}
	return anc
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (anc *AdmNumberCreate) SetPrefillWithZero(b bool) *AdmNumberCreate {
	anc.mutation.SetPrefillWithZero(b)
	return anc
}

// SetNillablePrefillWithZero sets the "prefill_with_zero" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillablePrefillWithZero(b *bool) *AdmNumberCreate {
	if b != nil {
		anc.SetPrefillWithZero(*b)
	}
	return anc
}

// SetPrefillWidth sets the "prefill_width" field.
func (anc *AdmNumberCreate) SetPrefillWidth(i int) *AdmNumberCreate {
	anc.mutation.SetPrefillWidth(i)
	return anc
}

// SetNillablePrefillWidth sets the "prefill_width" field if the given value is not nil.
func (anc *AdmNumberCreate) SetNillablePrefillWidth(i *int) *AdmNumberCreate {
	if i != nil {
		anc.SetPrefillWidth(*i)
	}
	return anc
}

// Mutation returns the AdmNumberMutation object of the builder.
func (anc *AdmNumberCreate) Mutation() *AdmNumberMutation {
	return anc.mutation
}

// Save creates the AdmNumber in the database.
func (anc *AdmNumberCreate) Save(ctx context.Context) (*AdmNumber, error) {
	var (
		err  error
		node *AdmNumber
	)
	anc.defaults()
	if len(anc.hooks) == 0 {
		if err = anc.check(); err != nil {
			return nil, err
		}
		node, err = anc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdmNumberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anc.check(); err != nil {
				return nil, err
			}
			anc.mutation = mutation
			if node, err = anc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(anc.hooks) - 1; i >= 0; i-- {
			if anc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, anc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AdmNumber)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AdmNumberMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (anc *AdmNumberCreate) SaveX(ctx context.Context) *AdmNumber {
	v, err := anc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (anc *AdmNumberCreate) Exec(ctx context.Context) error {
	_, err := anc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anc *AdmNumberCreate) ExecX(ctx context.Context) {
	if err := anc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (anc *AdmNumberCreate) defaults() {
	if _, ok := anc.mutation.AdmStartNo(); !ok {
		v := admnumber.DefaultAdmStartNo
		anc.mutation.SetAdmStartNo(v)
	}
	if _, ok := anc.mutation.AdmCurrentNo(); !ok {
		v := admnumber.DefaultAdmCurrentNo
		anc.mutation.SetAdmCurrentNo(v)
	}
	if _, ok := anc.mutation.IsPrefixed(); !ok {
		v := admnumber.DefaultIsPrefixed
		anc.mutation.SetIsPrefixed(v)
	}
	if _, ok := anc.mutation.PrefixStr(); !ok {
		v := admnumber.DefaultPrefixStr
		anc.mutation.SetPrefixStr(v)
	}
	if _, ok := anc.mutation.SuffixStr(); !ok {
		v := admnumber.DefaultSuffixStr
		anc.mutation.SetSuffixStr(v)
	}
	if _, ok := anc.mutation.Separator(); !ok {
		v := admnumber.DefaultSeparator
		anc.mutation.SetSeparator(v)
	}
	if _, ok := anc.mutation.PrefillWithZero(); !ok {
		v := admnumber.DefaultPrefillWithZero
		anc.mutation.SetPrefillWithZero(v)
	}
	if _, ok := anc.mutation.PrefillWidth(); !ok {
		v := admnumber.DefaultPrefillWidth
		anc.mutation.SetPrefillWidth(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anc *AdmNumberCreate) check() error {
	if _, ok := anc.mutation.AdmStartNo(); !ok {
		return &ValidationError{Name: "adm_start_no", err: errors.New(`ent: missing required field "AdmNumber.adm_start_no"`)}
	}
	if _, ok := anc.mutation.AdmCurrentNo(); !ok {
		return &ValidationError{Name: "adm_current_no", err: errors.New(`ent: missing required field "AdmNumber.adm_current_no"`)}
	}
	if _, ok := anc.mutation.IsPrefixed(); !ok {
		return &ValidationError{Name: "is_prefixed", err: errors.New(`ent: missing required field "AdmNumber.is_prefixed"`)}
	}
	if _, ok := anc.mutation.PrefixStr(); !ok {
		return &ValidationError{Name: "prefix_str", err: errors.New(`ent: missing required field "AdmNumber.prefix_str"`)}
	}
	if _, ok := anc.mutation.SuffixStr(); !ok {
		return &ValidationError{Name: "suffix_str", err: errors.New(`ent: missing required field "AdmNumber.suffix_str"`)}
	}
	if _, ok := anc.mutation.Separator(); !ok {
		return &ValidationError{Name: "separator", err: errors.New(`ent: missing required field "AdmNumber.separator"`)}
	}
	if _, ok := anc.mutation.PrefillWithZero(); !ok {
		return &ValidationError{Name: "prefill_with_zero", err: errors.New(`ent: missing required field "AdmNumber.prefill_with_zero"`)}
	}
	if _, ok := anc.mutation.PrefillWidth(); !ok {
		return &ValidationError{Name: "prefill_width", err: errors.New(`ent: missing required field "AdmNumber.prefill_width"`)}
	}
	if v, ok := anc.mutation.PrefillWidth(); ok {
		if err := admnumber.PrefillWidthValidator(v); err != nil {
			return &ValidationError{Name: "prefill_width", err: fmt.Errorf(`ent: validator failed for field "AdmNumber.prefill_width": %w`, err)}
		}
	}
	return nil
}

func (anc *AdmNumberCreate) sqlSave(ctx context.Context) (*AdmNumber, error) {
	_node, _spec := anc.createSpec()
	if err := sqlgraph.CreateNode(ctx, anc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (anc *AdmNumberCreate) createSpec() (*AdmNumber, *sqlgraph.CreateSpec) {
	var (
		_node = &AdmNumber{config: anc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: admnumber.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admnumber.FieldID,
			},
		}
	)
	_spec.OnConflict = anc.conflict
	if value, ok := anc.mutation.AdmStartNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmStartNo,
		})
		_node.AdmStartNo = value
	}
	if value, ok := anc.mutation.AdmCurrentNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmCurrentNo,
		})
		_node.AdmCurrentNo = value
	}
	if value, ok := anc.mutation.IsPrefixed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldIsPrefixed,
		})
		_node.IsPrefixed = value
	}
	if value, ok := anc.mutation.PrefixStr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldPrefixStr,
		})
		_node.PrefixStr = value
	}
	if value, ok := anc.mutation.SuffixStr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSuffixStr,
		})
		_node.SuffixStr = value
	}
	if value, ok := anc.mutation.Separator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSeparator,
		})
		_node.Separator = value
	}
	if value, ok := anc.mutation.PrefillWithZero(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldPrefillWithZero,
		})
		_node.PrefillWithZero = value
	}
	if value, ok := anc.mutation.PrefillWidth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admnumber.FieldPrefillWidth,
		})
		_node.PrefillWidth = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdmNumber.Create().
//		SetAdmStartNo(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdmNumberUpsert) {
//			SetAdmStartNo(v+v).
//		}).
//		Exec(ctx)
func (anc *AdmNumberCreate) OnConflict(opts ...sql.ConflictOption) *AdmNumberUpsertOne {
	anc.conflict = opts
	return &AdmNumberUpsertOne{
		create: anc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (anc *AdmNumberCreate) OnConflictColumns(columns ...string) *AdmNumberUpsertOne {
	anc.conflict = append(anc.conflict, sql.ConflictColumns(columns...))
	return &AdmNumberUpsertOne{
		create: anc,
	}
}

type (
	// AdmNumberUpsertOne is the builder for "upsert"-ing
	//  one AdmNumber node.
	AdmNumberUpsertOne struct {
		create *AdmNumberCreate
	}

	// AdmNumberUpsert is the "OnConflict" setter.
	AdmNumberUpsert struct {
		*sql.UpdateSet
	}
)

// SetAdmStartNo sets the "adm_start_no" field.
func (u *AdmNumberUpsert) SetAdmStartNo(v string) *AdmNumberUpsert {
	u.Set(admnumber.FieldAdmStartNo, v)
	return u
}

// UpdateAdmStartNo sets the "adm_start_no" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdateAdmStartNo() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldAdmStartNo)
	return u
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (u *AdmNumberUpsert) SetAdmCurrentNo(v string) *AdmNumberUpsert {
	u.Set(admnumber.FieldAdmCurrentNo, v)
	return u
}

// UpdateAdmCurrentNo sets the "adm_current_no" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdateAdmCurrentNo() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldAdmCurrentNo)
	return u
}

// SetIsPrefixed sets the "is_prefixed" field.
func (u *AdmNumberUpsert) SetIsPrefixed(v bool) *AdmNumberUpsert {
	u.Set(admnumber.FieldIsPrefixed, v)
	return u
}

// UpdateIsPrefixed sets the "is_prefixed" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdateIsPrefixed() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldIsPrefixed)
	return u
}

// SetPrefixStr sets the "prefix_str" field.
func (u *AdmNumberUpsert) SetPrefixStr(v string) *AdmNumberUpsert {
	u.Set(admnumber.FieldPrefixStr, v)
	return u
}

// UpdatePrefixStr sets the "prefix_str" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdatePrefixStr() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldPrefixStr)
	return u
}

// SetSuffixStr sets the "suffix_str" field.
func (u *AdmNumberUpsert) SetSuffixStr(v string) *AdmNumberUpsert {
	u.Set(admnumber.FieldSuffixStr, v)
	return u
}

// UpdateSuffixStr sets the "suffix_str" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdateSuffixStr() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldSuffixStr)
	return u
}

// SetSeparator sets the "separator" field.
func (u *AdmNumberUpsert) SetSeparator(v string) *AdmNumberUpsert {
	u.Set(admnumber.FieldSeparator, v)
	return u
}

// UpdateSeparator sets the "separator" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdateSeparator() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldSeparator)
	return u
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (u *AdmNumberUpsert) SetPrefillWithZero(v bool) *AdmNumberUpsert {
	u.Set(admnumber.FieldPrefillWithZero, v)
	return u
}

// UpdatePrefillWithZero sets the "prefill_with_zero" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdatePrefillWithZero() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldPrefillWithZero)
	return u
}

// SetPrefillWidth sets the "prefill_width" field.
func (u *AdmNumberUpsert) SetPrefillWidth(v int) *AdmNumberUpsert {
	u.Set(admnumber.FieldPrefillWidth, v)
	return u
}

// UpdatePrefillWidth sets the "prefill_width" field to the value that was provided on create.
func (u *AdmNumberUpsert) UpdatePrefillWidth() *AdmNumberUpsert {
	u.SetExcluded(admnumber.FieldPrefillWidth)
	return u
}

// AddPrefillWidth adds v to the "prefill_width" field.
func (u *AdmNumberUpsert) AddPrefillWidth(v int) *AdmNumberUpsert {
	u.Add(admnumber.FieldPrefillWidth, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdmNumberUpsertOne) UpdateNewValues() *AdmNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AdmNumberUpsertOne) Ignore() *AdmNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdmNumberUpsertOne) DoNothing() *AdmNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdmNumberCreate.OnConflict
// documentation for more info.
func (u *AdmNumberUpsertOne) Update(set func(*AdmNumberUpsert)) *AdmNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdmNumberUpsert{UpdateSet: update})
	}))
	return u
}

// SetAdmStartNo sets the "adm_start_no" field.
func (u *AdmNumberUpsertOne) SetAdmStartNo(v string) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetAdmStartNo(v)
	})
}

// UpdateAdmStartNo sets the "adm_start_no" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdateAdmStartNo() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateAdmStartNo()
	})
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (u *AdmNumberUpsertOne) SetAdmCurrentNo(v string) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetAdmCurrentNo(v)
	})
}

// UpdateAdmCurrentNo sets the "adm_current_no" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdateAdmCurrentNo() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateAdmCurrentNo()
	})
}

// SetIsPrefixed sets the "is_prefixed" field.
func (u *AdmNumberUpsertOne) SetIsPrefixed(v bool) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetIsPrefixed(v)
	})
}

// UpdateIsPrefixed sets the "is_prefixed" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdateIsPrefixed() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateIsPrefixed()
	})
}

// SetPrefixStr sets the "prefix_str" field.
func (u *AdmNumberUpsertOne) SetPrefixStr(v string) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefixStr(v)
	})
}

// UpdatePrefixStr sets the "prefix_str" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdatePrefixStr() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefixStr()
	})
}

// SetSuffixStr sets the "suffix_str" field.
func (u *AdmNumberUpsertOne) SetSuffixStr(v string) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetSuffixStr(v)
	})
}

// UpdateSuffixStr sets the "suffix_str" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdateSuffixStr() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateSuffixStr()
	})
}

// SetSeparator sets the "separator" field.
func (u *AdmNumberUpsertOne) SetSeparator(v string) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetSeparator(v)
	})
}

// UpdateSeparator sets the "separator" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdateSeparator() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateSeparator()
	})
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (u *AdmNumberUpsertOne) SetPrefillWithZero(v bool) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefillWithZero(v)
	})
}

// UpdatePrefillWithZero sets the "prefill_with_zero" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdatePrefillWithZero() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefillWithZero()
	})
}

// SetPrefillWidth sets the "prefill_width" field.
func (u *AdmNumberUpsertOne) SetPrefillWidth(v int) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefillWidth(v)
	})
}

// AddPrefillWidth adds v to the "prefill_width" field.
func (u *AdmNumberUpsertOne) AddPrefillWidth(v int) *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.AddPrefillWidth(v)
	})
}

// UpdatePrefillWidth sets the "prefill_width" field to the value that was provided on create.
func (u *AdmNumberUpsertOne) UpdatePrefillWidth() *AdmNumberUpsertOne {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefillWidth()
	})
}

// Exec executes the query.
func (u *AdmNumberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdmNumberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdmNumberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AdmNumberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AdmNumberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AdmNumberCreateBulk is the builder for creating many AdmNumber entities in bulk.
type AdmNumberCreateBulk struct {
	config
	builders []*AdmNumberCreate
	conflict []sql.ConflictOption
}

// Save creates the AdmNumber entities in the database.
func (ancb *AdmNumberCreateBulk) Save(ctx context.Context) ([]*AdmNumber, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ancb.builders))
	nodes := make([]*AdmNumber, len(ancb.builders))
	mutators := make([]Mutator, len(ancb.builders))
	for i := range ancb.builders {
		func(i int, root context.Context) {
			builder := ancb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdmNumberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ancb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ancb *AdmNumberCreateBulk) SaveX(ctx context.Context) []*AdmNumber {
	v, err := ancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ancb *AdmNumberCreateBulk) Exec(ctx context.Context) error {
	_, err := ancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ancb *AdmNumberCreateBulk) ExecX(ctx context.Context) {
	if err := ancb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdmNumber.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdmNumberUpsert) {
//			SetAdmStartNo(v+v).
//		}).
//		Exec(ctx)
func (ancb *AdmNumberCreateBulk) OnConflict(opts ...sql.ConflictOption) *AdmNumberUpsertBulk {
	ancb.conflict = opts
	return &AdmNumberUpsertBulk{
		create: ancb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ancb *AdmNumberCreateBulk) OnConflictColumns(columns ...string) *AdmNumberUpsertBulk {
	ancb.conflict = append(ancb.conflict, sql.ConflictColumns(columns...))
	return &AdmNumberUpsertBulk{
		create: ancb,
	}
}

// AdmNumberUpsertBulk is the builder for "upsert"-ing
// a bulk of AdmNumber nodes.
type AdmNumberUpsertBulk struct {
	create *AdmNumberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdmNumberUpsertBulk) UpdateNewValues() *AdmNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdmNumber.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AdmNumberUpsertBulk) Ignore() *AdmNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdmNumberUpsertBulk) DoNothing() *AdmNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdmNumberCreateBulk.OnConflict
// documentation for more info.
func (u *AdmNumberUpsertBulk) Update(set func(*AdmNumberUpsert)) *AdmNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdmNumberUpsert{UpdateSet: update})
	}))
	return u
}

// SetAdmStartNo sets the "adm_start_no" field.
func (u *AdmNumberUpsertBulk) SetAdmStartNo(v string) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetAdmStartNo(v)
	})
}

// UpdateAdmStartNo sets the "adm_start_no" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdateAdmStartNo() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateAdmStartNo()
	})
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (u *AdmNumberUpsertBulk) SetAdmCurrentNo(v string) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetAdmCurrentNo(v)
	})
}

// UpdateAdmCurrentNo sets the "adm_current_no" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdateAdmCurrentNo() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateAdmCurrentNo()
	})
}

// SetIsPrefixed sets the "is_prefixed" field.
func (u *AdmNumberUpsertBulk) SetIsPrefixed(v bool) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetIsPrefixed(v)
	})
}

// UpdateIsPrefixed sets the "is_prefixed" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdateIsPrefixed() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateIsPrefixed()
	})
}

// SetPrefixStr sets the "prefix_str" field.
func (u *AdmNumberUpsertBulk) SetPrefixStr(v string) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefixStr(v)
	})
}

// UpdatePrefixStr sets the "prefix_str" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdatePrefixStr() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefixStr()
	})
}

// SetSuffixStr sets the "suffix_str" field.
func (u *AdmNumberUpsertBulk) SetSuffixStr(v string) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetSuffixStr(v)
	})
}

// UpdateSuffixStr sets the "suffix_str" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdateSuffixStr() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateSuffixStr()
	})
}

// SetSeparator sets the "separator" field.
func (u *AdmNumberUpsertBulk) SetSeparator(v string) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetSeparator(v)
	})
}

// UpdateSeparator sets the "separator" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdateSeparator() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdateSeparator()
	})
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (u *AdmNumberUpsertBulk) SetPrefillWithZero(v bool) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefillWithZero(v)
	})
}

// UpdatePrefillWithZero sets the "prefill_with_zero" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdatePrefillWithZero() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefillWithZero()
	})
}

// SetPrefillWidth sets the "prefill_width" field.
func (u *AdmNumberUpsertBulk) SetPrefillWidth(v int) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.SetPrefillWidth(v)
	})
}

// AddPrefillWidth adds v to the "prefill_width" field.
func (u *AdmNumberUpsertBulk) AddPrefillWidth(v int) *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.AddPrefillWidth(v)
	})
}

// UpdatePrefillWidth sets the "prefill_width" field to the value that was provided on create.
func (u *AdmNumberUpsertBulk) UpdatePrefillWidth() *AdmNumberUpsertBulk {
	return u.Update(func(s *AdmNumberUpsert) {
		s.UpdatePrefillWidth()
	})
}

// Exec executes the query.
func (u *AdmNumberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AdmNumberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdmNumberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdmNumberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
