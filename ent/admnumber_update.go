// Copyright 2021-present Eduate Pvt Ltd. All rights reserved.
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"adm-num/ent/admnumber"
	"adm-num/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdmNumberUpdate is the builder for updating AdmNumber entities.
type AdmNumberUpdate struct {
	config
	hooks     []Hook
	mutation  *AdmNumberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdmNumberUpdate builder.
func (anu *AdmNumberUpdate) Where(ps ...predicate.AdmNumber) *AdmNumberUpdate {
	anu.mutation.Where(ps...)
	return anu
}

// SetAdmStartNo sets the "adm_start_no" field.
func (anu *AdmNumberUpdate) SetAdmStartNo(s string) *AdmNumberUpdate {
	anu.mutation.SetAdmStartNo(s)
	return anu
}

// SetNillableAdmStartNo sets the "adm_start_no" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillableAdmStartNo(s *string) *AdmNumberUpdate {
	if s != nil {
		anu.SetAdmStartNo(*s)
	}
	return anu
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (anu *AdmNumberUpdate) SetAdmCurrentNo(s string) *AdmNumberUpdate {
	anu.mutation.SetAdmCurrentNo(s)
	return anu
}

// SetNillableAdmCurrentNo sets the "adm_current_no" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillableAdmCurrentNo(s *string) *AdmNumberUpdate {
	if s != nil {
		anu.SetAdmCurrentNo(*s)
	}
	return anu
}

// SetIsPrefixed sets the "is_prefixed" field.
func (anu *AdmNumberUpdate) SetIsPrefixed(b bool) *AdmNumberUpdate {
	anu.mutation.SetIsPrefixed(b)
	return anu
}

// SetNillableIsPrefixed sets the "is_prefixed" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillableIsPrefixed(b *bool) *AdmNumberUpdate {
	if b != nil {
		anu.SetIsPrefixed(*b)
	}
	return anu
}

// SetPrefixStr sets the "prefix_str" field.
func (anu *AdmNumberUpdate) SetPrefixStr(s string) *AdmNumberUpdate {
	anu.mutation.SetPrefixStr(s)
	return anu
}

// SetNillablePrefixStr sets the "prefix_str" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillablePrefixStr(s *string) *AdmNumberUpdate {
	if s != nil {
		anu.SetPrefixStr(*s)
	}
	return anu
}

// SetSuffixStr sets the "suffix_str" field.
func (anu *AdmNumberUpdate) SetSuffixStr(s string) *AdmNumberUpdate {
	anu.mutation.SetSuffixStr(s)
	return anu
}

// SetNillableSuffixStr sets the "suffix_str" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillableSuffixStr(s *string) *AdmNumberUpdate {
	if s != nil {
		anu.SetSuffixStr(*s)
	}
	return anu
}

// SetSeparator sets the "separator" field.
func (anu *AdmNumberUpdate) SetSeparator(s string) *AdmNumberUpdate {
	anu.mutation.SetSeparator(s)
	return anu
}

// SetNillableSeparator sets the "separator" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillableSeparator(s *string) *AdmNumberUpdate {
	if s != nil {
		anu.SetSeparator(*s)
	}
	return anu
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (anu *AdmNumberUpdate) SetPrefillWithZero(b bool) *AdmNumberUpdate {
	anu.mutation.SetPrefillWithZero(b)
	return anu
}

// SetNillablePrefillWithZero sets the "prefill_with_zero" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillablePrefillWithZero(b *bool) *AdmNumberUpdate {
	if b != nil {
		anu.SetPrefillWithZero(*b)
	}
	return anu
}

// SetPrefillWidth sets the "prefill_width" field.
func (anu *AdmNumberUpdate) SetPrefillWidth(i int) *AdmNumberUpdate {
	anu.mutation.ResetPrefillWidth()
	anu.mutation.SetPrefillWidth(i)
	return anu
}

// SetNillablePrefillWidth sets the "prefill_width" field if the given value is not nil.
func (anu *AdmNumberUpdate) SetNillablePrefillWidth(i *int) *AdmNumberUpdate {
	if i != nil {
		anu.SetPrefillWidth(*i)
	}
	return anu
}

// AddPrefillWidth adds i to the "prefill_width" field.
func (anu *AdmNumberUpdate) AddPrefillWidth(i int) *AdmNumberUpdate {
	anu.mutation.AddPrefillWidth(i)
	return anu
}

// Mutation returns the AdmNumberMutation object of the builder.
func (anu *AdmNumberUpdate) Mutation() *AdmNumberMutation {
	return anu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (anu *AdmNumberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(anu.hooks) == 0 {
		if err = anu.check(); err != nil {
			return 0, err
		}
		affected, err = anu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdmNumberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anu.check(); err != nil {
				return 0, err
			}
			anu.mutation = mutation
			affected, err = anu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(anu.hooks) - 1; i >= 0; i-- {
			if anu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, anu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (anu *AdmNumberUpdate) SaveX(ctx context.Context) int {
	affected, err := anu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (anu *AdmNumberUpdate) Exec(ctx context.Context) error {
	_, err := anu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anu *AdmNumberUpdate) ExecX(ctx context.Context) {
	if err := anu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anu *AdmNumberUpdate) check() error {
	if v, ok := anu.mutation.PrefillWidth(); ok {
		if err := admnumber.PrefillWidthValidator(v); err != nil {
			return &ValidationError{Name: "prefill_width", err: fmt.Errorf(`ent: validator failed for field "AdmNumber.prefill_width": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (anu *AdmNumberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdmNumberUpdate {
	anu.modifiers = append(anu.modifiers, modifiers...)
	return anu
}

func (anu *AdmNumberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admnumber.Table,
			Columns: admnumber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admnumber.FieldID,
			},
		},
	}
	if ps := anu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anu.mutation.AdmStartNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmStartNo,
		})
	}
	if value, ok := anu.mutation.AdmCurrentNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmCurrentNo,
		})
	}
	if value, ok := anu.mutation.IsPrefixed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldIsPrefixed,
		})
	}
	if value, ok := anu.mutation.PrefixStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldPrefixStr,
		})
	}
	if value, ok := anu.mutation.SuffixStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSuffixStr,
		})
	}
	if value, ok := anu.mutation.Separator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSeparator,
		})
	}
	if value, ok := anu.mutation.PrefillWithZero(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldPrefillWithZero,
		})
	}
	if value, ok := anu.mutation.PrefillWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admnumber.FieldPrefillWidth,
		})
	}
	if value, ok := anu.mutation.AddedPrefillWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admnumber.FieldPrefillWidth,
		})
	}
	_spec.Modifiers = anu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, anu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admnumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AdmNumberUpdateOne is the builder for updating a single AdmNumber entity.
type AdmNumberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdmNumberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAdmStartNo sets the "adm_start_no" field.
func (anuo *AdmNumberUpdateOne) SetAdmStartNo(s string) *AdmNumberUpdateOne {
	anuo.mutation.SetAdmStartNo(s)
	return anuo
}

// SetNillableAdmStartNo sets the "adm_start_no" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillableAdmStartNo(s *string) *AdmNumberUpdateOne {
	if s != nil {
		anuo.SetAdmStartNo(*s)
	}
	return anuo
}

// SetAdmCurrentNo sets the "adm_current_no" field.
func (anuo *AdmNumberUpdateOne) SetAdmCurrentNo(s string) *AdmNumberUpdateOne {
	anuo.mutation.SetAdmCurrentNo(s)
	return anuo
}

// SetNillableAdmCurrentNo sets the "adm_current_no" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillableAdmCurrentNo(s *string) *AdmNumberUpdateOne {
	if s != nil {
		anuo.SetAdmCurrentNo(*s)
	}
	return anuo
}

// SetIsPrefixed sets the "is_prefixed" field.
func (anuo *AdmNumberUpdateOne) SetIsPrefixed(b bool) *AdmNumberUpdateOne {
	anuo.mutation.SetIsPrefixed(b)
	return anuo
}

// SetNillableIsPrefixed sets the "is_prefixed" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillableIsPrefixed(b *bool) *AdmNumberUpdateOne {
	if b != nil {
		anuo.SetIsPrefixed(*b)
	}
	return anuo
}

// SetPrefixStr sets the "prefix_str" field.
func (anuo *AdmNumberUpdateOne) SetPrefixStr(s string) *AdmNumberUpdateOne {
	anuo.mutation.SetPrefixStr(s)
	return anuo
}

// SetNillablePrefixStr sets the "prefix_str" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillablePrefixStr(s *string) *AdmNumberUpdateOne {
	if s != nil {
		anuo.SetPrefixStr(*s)
	}
	return anuo
}

// SetSuffixStr sets the "suffix_str" field.
func (anuo *AdmNumberUpdateOne) SetSuffixStr(s string) *AdmNumberUpdateOne {
	anuo.mutation.SetSuffixStr(s)
	return anuo
}

// SetNillableSuffixStr sets the "suffix_str" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillableSuffixStr(s *string) *AdmNumberUpdateOne {
	if s != nil {
		anuo.SetSuffixStr(*s)
	}
	return anuo
}

// SetSeparator sets the "separator" field.
func (anuo *AdmNumberUpdateOne) SetSeparator(s string) *AdmNumberUpdateOne {
	anuo.mutation.SetSeparator(s)
	return anuo
}

// SetNillableSeparator sets the "separator" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillableSeparator(s *string) *AdmNumberUpdateOne {
	if s != nil {
		anuo.SetSeparator(*s)
	}
	return anuo
}

// SetPrefillWithZero sets the "prefill_with_zero" field.
func (anuo *AdmNumberUpdateOne) SetPrefillWithZero(b bool) *AdmNumberUpdateOne {
	anuo.mutation.SetPrefillWithZero(b)
	return anuo
}

// SetNillablePrefillWithZero sets the "prefill_with_zero" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillablePrefillWithZero(b *bool) *AdmNumberUpdateOne {
	if b != nil {
		anuo.SetPrefillWithZero(*b)
	}
	return anuo
}

// SetPrefillWidth sets the "prefill_width" field.
func (anuo *AdmNumberUpdateOne) SetPrefillWidth(i int) *AdmNumberUpdateOne {
	anuo.mutation.ResetPrefillWidth()
	anuo.mutation.SetPrefillWidth(i)
	return anuo
}

// SetNillablePrefillWidth sets the "prefill_width" field if the given value is not nil.
func (anuo *AdmNumberUpdateOne) SetNillablePrefillWidth(i *int) *AdmNumberUpdateOne {
	if i != nil {
		anuo.SetPrefillWidth(*i)
	}
	return anuo
}

// AddPrefillWidth adds i to the "prefill_width" field.
func (anuo *AdmNumberUpdateOne) AddPrefillWidth(i int) *AdmNumberUpdateOne {
	anuo.mutation.AddPrefillWidth(i)
	return anuo
}

// Mutation returns the AdmNumberMutation object of the builder.
func (anuo *AdmNumberUpdateOne) Mutation() *AdmNumberMutation {
	return anuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (anuo *AdmNumberUpdateOne) Select(field string, fields ...string) *AdmNumberUpdateOne {
	anuo.fields = append([]string{field}, fields...)
	return anuo
}

// Save executes the query and returns the updated AdmNumber entity.
func (anuo *AdmNumberUpdateOne) Save(ctx context.Context) (*AdmNumber, error) {
	var (
		err  error
		node *AdmNumber
	)
	if len(anuo.hooks) == 0 {
		if err = anuo.check(); err != nil {
			return nil, err
		}
		node, err = anuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdmNumberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anuo.check(); err != nil {
				return nil, err
			}
			anuo.mutation = mutation
			node, err = anuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(anuo.hooks) - 1; i >= 0; i-- {
			if anuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, anuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AdmNumber)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AdmNumberMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (anuo *AdmNumberUpdateOne) SaveX(ctx context.Context) *AdmNumber {
	node, err := anuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (anuo *AdmNumberUpdateOne) Exec(ctx context.Context) error {
	_, err := anuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anuo *AdmNumberUpdateOne) ExecX(ctx context.Context) {
	if err := anuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anuo *AdmNumberUpdateOne) check() error {
	if v, ok := anuo.mutation.PrefillWidth(); ok {
		if err := admnumber.PrefillWidthValidator(v); err != nil {
			return &ValidationError{Name: "prefill_width", err: fmt.Errorf(`ent: validator failed for field "AdmNumber.prefill_width": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (anuo *AdmNumberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdmNumberUpdateOne {
	anuo.modifiers = append(anuo.modifiers, modifiers...)
	return anuo
}

func (anuo *AdmNumberUpdateOne) sqlSave(ctx context.Context) (_node *AdmNumber, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admnumber.Table,
			Columns: admnumber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admnumber.FieldID,
			},
		},
	}
	id, ok := anuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdmNumber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := anuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admnumber.FieldID)
		for _, f := range fields {
			if !admnumber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admnumber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := anuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anuo.mutation.AdmStartNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmStartNo,
		})
	}
	if value, ok := anuo.mutation.AdmCurrentNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldAdmCurrentNo,
		})
	}
	if value, ok := anuo.mutation.IsPrefixed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldIsPrefixed,
		})
	}
	if value, ok := anuo.mutation.PrefixStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldPrefixStr,
		})
	}
	if value, ok := anuo.mutation.SuffixStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSuffixStr,
		})
	}
	if value, ok := anuo.mutation.Separator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admnumber.FieldSeparator,
		})
	}
	if value, ok := anuo.mutation.PrefillWithZero(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: admnumber.FieldPrefillWithZero,
		})
	}
	if value, ok := anuo.mutation.PrefillWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admnumber.FieldPrefillWidth,
		})
	}
	if value, ok := anuo.mutation.AddedPrefillWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admnumber.FieldPrefillWidth,
		})
	}
	_spec.Modifiers = anuo.modifiers
	_node = &AdmNumber{config: anuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, anuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admnumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
